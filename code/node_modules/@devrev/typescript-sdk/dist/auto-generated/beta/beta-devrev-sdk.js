"use strict";
/* eslint-disable */
/* tslint:disable */
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricActionExecuteRequestAction = exports.MemberType = exports.ListMode = exports.LinksDirection = exports.LinkType = exports.LinkEndpointType = exports.IssuePriority = exports.GroupedVistaFlavor = exports.GroupType = exports.GroupMemberType = exports.GroupIngestionSource = exports.GenericNotificationEventType = exports.FieldValueType = exports.EventSourceStatus = exports.EventFetchedResult = exports.ErrorUnauthorizedType = exports.ErrorTooManyRequestsType = exports.ErrorServiceUnavailableType = exports.ErrorNotFoundType = exports.ErrorInternalServerErrorType = exports.ErrorForbiddenType = exports.ErrorConflictType = exports.ErrorBadRequestUnexpectedJsonTypeType = exports.ErrorBadRequestType = exports.EngagementsCreateRequestEngagementType = exports.EngagementType = exports.DevUserJobTitle = exports.DevOrgAuthConnectionsUpdateRequestType = exports.DevOrgAuthConnectionsCreateRequestType = exports.DateTimePresetType = exports.DateFilterType = exports.CustomSchemaFragmentsSetRequestType = exports.CustomSchemaFragmentsListRequestPrune = exports.CustomSchemaFragmentType = exports.CustomSchemaFragmentFragmentType = exports.ConversationsCreateRequestTypeValue = exports.CodeChangeSource = exports.BooleanExpressionType = exports.AuthTokenTokenType = exports.AuthTokenSubjectTokenType = exports.AuthTokenStatus = exports.AuthTokenRequestedTokenType = exports.AuthTokenGrantType = exports.AuthConnectionType = exports.AuthConnectionToggle = exports.AtomType = exports.ArticleType = exports.ArticleStatus = exports.AggregationDetailAggregationType = exports.AccessLevel = void 0;
exports.TimelineEntryObjectType = exports.TimelineEntriesUpdateRequestType = exports.TimelineEntriesCreateRequestType = exports.TimelineEntriesCollection = exports.TimelineCommentBodyType = exports.TimelineChangeEventEventType = exports.TicketSeverity = exports.TicketChannels = exports.TaskPriority = exports.SyncOutStatus = exports.SyncMetadataFilterSyncOutFilterStatus = exports.SyncMetadataFilterSyncInFilterStatus = exports.SyncInStatus = exports.StockSchemaFragmentsListRequestPrune = exports.StockSchemaFragmentsListRequestFilterPreset = exports.StageValidationOptionForUpdate = exports.StageValidationOptionForCreate = exports.SnapWidgetsCreateRequestType = exports.SnapWidgetType = exports.SnapWidgetStatus = exports.SnapWidgetNamespace = exports.SlasFilterAppliesToOperatorType = exports.SlaType = exports.SlaSummaryStage = exports.SlaStatus = exports.SlaSelectorSeverity = exports.SlaSelectorPriority = exports.SlaSelectorAppliesTo = exports.SlaEvaluationPeriod = exports.SlaAppliesTo = exports.SendNotificationType = exports.SearchSortOrderParam = exports.SearchSortByParam = exports.SearchResultType = exports.SearchNamespace = exports.SearchHybridNamespace = exports.SchemaFieldDescriptorFieldType = exports.SchemaFieldDescriptorArrayTypeBaseType = exports.QuestionAnswerStatus = exports.PreferencesType = exports.PartType = exports.OrgType = exports.OrgScheduleStatus = exports.OrgScheduleFragmentStatus = exports.OrgEnvironment = exports.OpportunityPriority = exports.OpportunityForecastCategory = exports.MetricDefinitionStatus = exports.MetricDefinitionMetricType = exports.MetricDefinitionAppliesTo = void 0;
exports.Api = exports.HttpClient = exports.ContentType = exports.WorkType = exports.WebhooksUpdateAction = exports.WebhookStatus = exports.WebhookEventType = exports.VistaType = exports.VistaGroupItemType = exports.VistaGroupItemState = exports.UserType = exports.UserState = exports.UomMetricScope = exports.UnitType = exports.TimelineEntryVisibility = exports.TimelineEntryType = exports.TimelineEntryPanel = void 0;
var AccessLevel;
(function (AccessLevel) {
    AccessLevel["External"] = "external";
    AccessLevel["Internal"] = "internal";
    AccessLevel["Private"] = "private";
    AccessLevel["Public"] = "public";
    AccessLevel["Restricted"] = "restricted";
})(AccessLevel = exports.AccessLevel || (exports.AccessLevel = {}));
/**
 * Aggregation type to be used while aggregating the metering data for the
 * UOM. 1] Sum - sum of all the values for the meter in a given period Ex.
 * { M1:2, M1:4 } => {M1:6} 2] Minimum - min of all the values for the
 * meter in a given period Ex. { M1:2, M1:4 } => {M1:2} 3] Maximum - max
 * of all the values for the meter in a given period Ex. { M1:2, M1:4 } =>
 * {M1:4} 4] Unique Count - Sum of distinct unique dimension observed for
 * the meter in the given period (not considering the data from the
 * previous billing period) Ex. January {M1:{VM:VM0}}, February
 * {M1:{VM:VM1}, M1:{VM:VM2}, M1:{VM:VM1}} => {M1:2} 5] Running Total -
 * Sum of distinct active unique dimension observed for a meter in the
 * given period, taking into consideration the active data from the
 * previous billing cycle Ex. January {M1:{VM:VM0,on}, {M1:{VM:VM1,off}
 * February {M1:{VM:VM2, on}, M1:{VM:VM2, off}, M1:{VM:VM3, on}} => {M1:3}
 * 6] Duration - Sum of distinct active unique dimension duration for a
 * meter in the given period, taking into consideration the active data
 * from the previous month Ex. January15 {M1:{VM:VM0,on, 4}} February15
 * {M1:{VM:VM0,off}, February18 {M1:{VM:VM1,on,5} => M1->
 * 30*4*charge_per_day + 10*5*charge_per_day 7] Latest - consider the
 * latest/last meter in the given period 8] Oldest - consider the
 * oldest/first record in the given period.
 */
var AggregationDetailAggregationType;
(function (AggregationDetailAggregationType) {
    AggregationDetailAggregationType["Duration"] = "duration";
    AggregationDetailAggregationType["Latest"] = "latest";
    AggregationDetailAggregationType["Maximum"] = "maximum";
    AggregationDetailAggregationType["Minimum"] = "minimum";
    AggregationDetailAggregationType["Oldest"] = "oldest";
    AggregationDetailAggregationType["RunningTotal"] = "running_total";
    AggregationDetailAggregationType["Sum"] = "sum";
    AggregationDetailAggregationType["UniqueCount"] = "unique_count";
})(AggregationDetailAggregationType = exports.AggregationDetailAggregationType || (exports.AggregationDetailAggregationType = {}));
/** Status of the article. */
var ArticleStatus;
(function (ArticleStatus) {
    ArticleStatus["Archived"] = "archived";
    ArticleStatus["Draft"] = "draft";
    ArticleStatus["Published"] = "published";
    ArticleStatus["ReviewNeeded"] = "review_needed";
})(ArticleStatus = exports.ArticleStatus || (exports.ArticleStatus = {}));
/** Type of the article. */
var ArticleType;
(function (ArticleType) {
    ArticleType["Article"] = "article";
    ArticleType["ContentBlock"] = "content_block";
})(ArticleType = exports.ArticleType || (exports.ArticleType = {}));
var AtomType;
(function (AtomType) {
    AtomType["Account"] = "account";
    AtomType["AppFragment"] = "app_fragment";
    AtomType["Capability"] = "capability";
    AtomType["Conversation"] = "conversation";
    AtomType["CustomTypeFragment"] = "custom_type_fragment";
    AtomType["DevUser"] = "dev_user";
    AtomType["Engagement"] = "engagement";
    AtomType["Enhancement"] = "enhancement";
    AtomType["Feature"] = "feature";
    AtomType["Issue"] = "issue";
    AtomType["Meeting"] = "meeting";
    AtomType["Opportunity"] = "opportunity";
    AtomType["Product"] = "product";
    AtomType["RevOrg"] = "rev_org";
    AtomType["RevUser"] = "rev_user";
    AtomType["ServiceAccount"] = "service_account";
    AtomType["SysUser"] = "sys_user";
    AtomType["Tag"] = "tag";
    AtomType["Task"] = "task";
    AtomType["TenantFragment"] = "tenant_fragment";
    AtomType["Ticket"] = "ticket";
    AtomType["TimelineChangeEvent"] = "timeline_change_event";
    AtomType["TimelineComment"] = "timeline_comment";
    AtomType["UserPreferences"] = "user_preferences";
    AtomType["Webhook"] = "webhook";
})(AtomType = exports.AtomType || (exports.AtomType = {}));
var AuthConnectionToggle;
(function (AuthConnectionToggle) {
    AuthConnectionToggle["Disable"] = "disable";
    AuthConnectionToggle["Enable"] = "enable";
})(AuthConnectionToggle = exports.AuthConnectionToggle || (exports.AuthConnectionToggle = {}));
/**
 * Defines the type for the authentication connection. The configuration
 * for each authentication connection will depend on the type value.
 */
var AuthConnectionType;
(function (AuthConnectionType) {
    AuthConnectionType["GoogleApps"] = "google_apps";
    AuthConnectionType["Oidc"] = "oidc";
    AuthConnectionType["Samlp"] = "samlp";
    AuthConnectionType["Social"] = "social";
    AuthConnectionType["Waad"] = "waad";
})(AuthConnectionType = exports.AuthConnectionType || (exports.AuthConnectionType = {}));
/** Specifies the process of obtaining a token. */
var AuthTokenGrantType;
(function (AuthTokenGrantType) {
    AuthTokenGrantType["UrnDevrevParamsOauthGrantTypeTokenIssue"] = "urn:devrev:params:oauth:grant-type:token-issue";
    AuthTokenGrantType["UrnIetfParamsOauthGrantTypeTokenExchange"] = "urn:ietf:params:oauth:grant-type:token-exchange";
})(AuthTokenGrantType = exports.AuthTokenGrantType || (exports.AuthTokenGrantType = {}));
/** The type of the requested token. */
var AuthTokenRequestedTokenType;
(function (AuthTokenRequestedTokenType) {
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeAat"] = "urn:devrev:params:oauth:token-type:aat";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeAatActAs"] = "urn:devrev:params:oauth:token-type:aat:act-as";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeAatPublic"] = "urn:devrev:params:oauth:token-type:aat:public";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeDev"] = "urn:devrev:params:oauth:token-type:dev";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeDevConnect"] = "urn:devrev:params:oauth:token-type:dev:connect";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeGat"] = "urn:devrev:params:oauth:token-type:gat";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypePat"] = "urn:devrev:params:oauth:token-type:pat";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypePatActAs"] = "urn:devrev:params:oauth:token-type:pat:act-as";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeRat"] = "urn:devrev:params:oauth:token-type:rat";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeRev"] = "urn:devrev:params:oauth:token-type:rev";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeSession"] = "urn:devrev:params:oauth:token-type:session";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeSessionDev0"] = "urn:devrev:params:oauth:token-type:session:dev0";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeSessionOnetime"] = "urn:devrev:params:oauth:token-type:session:onetime";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeSessionRevActAs"] = "urn:devrev:params:oauth:token-type:session:rev:act-as";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeSuper"] = "urn:devrev:params:oauth:token-type:super";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeSys"] = "urn:devrev:params:oauth:token-type:sys";
    AuthTokenRequestedTokenType["UrnIetfParamsOauthTokenTypeJwt"] = "urn:ietf:params:oauth:token-type:jwt";
})(AuthTokenRequestedTokenType = exports.AuthTokenRequestedTokenType || (exports.AuthTokenRequestedTokenType = {}));
/** The status of the token. */
var AuthTokenStatus;
(function (AuthTokenStatus) {
    AuthTokenStatus["Active"] = "active";
    AuthTokenStatus["Expired"] = "expired";
    AuthTokenStatus["Revoked"] = "revoked";
})(AuthTokenStatus = exports.AuthTokenStatus || (exports.AuthTokenStatus = {}));
/** The type of the subject token. */
var AuthTokenSubjectTokenType;
(function (AuthTokenSubjectTokenType) {
    AuthTokenSubjectTokenType["UrnDevrevParamsOauthTokenTypeJwtAuth0"] = "urn:devrev:params:oauth:token-type:jwt:auth0";
    AuthTokenSubjectTokenType["UrnDevrevParamsOauthTokenTypeJwtDev"] = "urn:devrev:params:oauth:token-type:jwt:dev";
    AuthTokenSubjectTokenType["UrnDevrevParamsOauthTokenTypeRat"] = "urn:devrev:params:oauth:token-type:rat";
    AuthTokenSubjectTokenType["UrnDevrevParamsOauthTokenTypeRev"] = "urn:devrev:params:oauth:token-type:rev";
    AuthTokenSubjectTokenType["UrnDevrevParamsOauthTokenTypeRevinfo"] = "urn:devrev:params:oauth:token-type:revinfo";
    AuthTokenSubjectTokenType["UrnDevrevParamsOauthTokenTypeSession"] = "urn:devrev:params:oauth:token-type:session";
    AuthTokenSubjectTokenType["UrnDevrevParamsOauthTokenTypeSysu"] = "urn:devrev:params:oauth:token-type:sysu";
    AuthTokenSubjectTokenType["UrnDevrevParamsOauthTokenTypeUserinfo"] = "urn:devrev:params:oauth:token-type:userinfo";
    AuthTokenSubjectTokenType["UrnIetfParamsOauthTokenTypeJwt"] = "urn:ietf:params:oauth:token-type:jwt";
})(AuthTokenSubjectTokenType = exports.AuthTokenSubjectTokenType || (exports.AuthTokenSubjectTokenType = {}));
/** The type of the issued token. Bearer is the only supported token type. */
var AuthTokenTokenType;
(function (AuthTokenTokenType) {
    AuthTokenTokenType["Bearer"] = "bearer";
})(AuthTokenTokenType = exports.AuthTokenTokenType || (exports.AuthTokenTokenType = {}));
var BooleanExpressionType;
(function (BooleanExpressionType) {
    BooleanExpressionType["And"] = "and";
    BooleanExpressionType["Not"] = "not";
    BooleanExpressionType["Or"] = "or";
    BooleanExpressionType["Primitive"] = "primitive";
})(BooleanExpressionType = exports.BooleanExpressionType || (exports.BooleanExpressionType = {}));
/** Source of the code change object. */
var CodeChangeSource;
(function (CodeChangeSource) {
    CodeChangeSource["AzureDevops"] = "azure_devops";
    CodeChangeSource["Bitbucket"] = "bitbucket";
    CodeChangeSource["Github"] = "github";
})(CodeChangeSource = exports.CodeChangeSource || (exports.CodeChangeSource = {}));
var ConversationsCreateRequestTypeValue;
(function (ConversationsCreateRequestTypeValue) {
    ConversationsCreateRequestTypeValue["Support"] = "support";
})(ConversationsCreateRequestTypeValue = exports.ConversationsCreateRequestTypeValue || (exports.ConversationsCreateRequestTypeValue = {}));
/** Type of the custom schema fragment. */
var CustomSchemaFragmentFragmentType;
(function (CustomSchemaFragmentFragmentType) {
    CustomSchemaFragmentFragmentType["App"] = "app";
    CustomSchemaFragmentFragmentType["CustomType"] = "custom_type";
    CustomSchemaFragmentFragmentType["Tenant"] = "tenant";
})(CustomSchemaFragmentFragmentType = exports.CustomSchemaFragmentFragmentType || (exports.CustomSchemaFragmentFragmentType = {}));
var CustomSchemaFragmentType;
(function (CustomSchemaFragmentType) {
    CustomSchemaFragmentType["AppFragment"] = "app_fragment";
    CustomSchemaFragmentType["CustomTypeFragment"] = "custom_type_fragment";
    CustomSchemaFragmentType["TenantFragment"] = "tenant_fragment";
})(CustomSchemaFragmentType = exports.CustomSchemaFragmentType || (exports.CustomSchemaFragmentType = {}));
var CustomSchemaFragmentsListRequestPrune;
(function (CustomSchemaFragmentsListRequestPrune) {
    CustomSchemaFragmentsListRequestPrune["Fields"] = "fields";
})(CustomSchemaFragmentsListRequestPrune = exports.CustomSchemaFragmentsListRequestPrune || (exports.CustomSchemaFragmentsListRequestPrune = {}));
var CustomSchemaFragmentsSetRequestType;
(function (CustomSchemaFragmentsSetRequestType) {
    CustomSchemaFragmentsSetRequestType["AppFragment"] = "app_fragment";
    CustomSchemaFragmentsSetRequestType["CustomTypeFragment"] = "custom_type_fragment";
    CustomSchemaFragmentsSetRequestType["TenantFragment"] = "tenant_fragment";
})(CustomSchemaFragmentsSetRequestType = exports.CustomSchemaFragmentsSetRequestType || (exports.CustomSchemaFragmentsSetRequestType = {}));
/** Type of date filter. */
var DateFilterType;
(function (DateFilterType) {
    DateFilterType["Preset"] = "preset";
    DateFilterType["Range"] = "range";
})(DateFilterType = exports.DateFilterType || (exports.DateFilterType = {}));
/** Type of date preset. */
var DateTimePresetType;
(function (DateTimePresetType) {
    DateTimePresetType["LastNDays"] = "last_n_days";
    DateTimePresetType["NextNDays"] = "next_n_days";
})(DateTimePresetType = exports.DateTimePresetType || (exports.DateTimePresetType = {}));
/**
 * Defines the type for the authentication connection. Different types of
 * authentication connections have different configuration parameters.
 */
var DevOrgAuthConnectionsCreateRequestType;
(function (DevOrgAuthConnectionsCreateRequestType) {
    DevOrgAuthConnectionsCreateRequestType["GoogleApps"] = "google_apps";
    DevOrgAuthConnectionsCreateRequestType["Oidc"] = "oidc";
    DevOrgAuthConnectionsCreateRequestType["Samlp"] = "samlp";
    DevOrgAuthConnectionsCreateRequestType["Waad"] = "waad";
})(DevOrgAuthConnectionsCreateRequestType = exports.DevOrgAuthConnectionsCreateRequestType || (exports.DevOrgAuthConnectionsCreateRequestType = {}));
/**
 * Specifies the type for the authentication connection. Different types
 * of authentication connections have different configuration parameters
 * that can be updated.
 */
var DevOrgAuthConnectionsUpdateRequestType;
(function (DevOrgAuthConnectionsUpdateRequestType) {
    DevOrgAuthConnectionsUpdateRequestType["GoogleApps"] = "google_apps";
    DevOrgAuthConnectionsUpdateRequestType["None"] = "none";
    DevOrgAuthConnectionsUpdateRequestType["Oidc"] = "oidc";
    DevOrgAuthConnectionsUpdateRequestType["Samlp"] = "samlp";
    DevOrgAuthConnectionsUpdateRequestType["Waad"] = "waad";
})(DevOrgAuthConnectionsUpdateRequestType = exports.DevOrgAuthConnectionsUpdateRequestType || (exports.DevOrgAuthConnectionsUpdateRequestType = {}));
/** Job title of the Dev User. */
var DevUserJobTitle;
(function (DevUserJobTitle) {
    DevUserJobTitle["CustomerSuccessManager"] = "customer_success_manager";
    DevUserJobTitle["Cxo"] = "cxo";
    DevUserJobTitle["Designer"] = "designer";
    DevUserJobTitle["Developer"] = "developer";
    DevUserJobTitle["HeadOfSupport"] = "head_of_support";
    DevUserJobTitle["Operations"] = "operations";
    DevUserJobTitle["Others"] = "others";
    DevUserJobTitle["ProductManager"] = "product_manager";
    DevUserJobTitle["Qa"] = "qa";
    DevUserJobTitle["RevenueLeader"] = "revenue_leader";
    DevUserJobTitle["Support"] = "support";
    DevUserJobTitle["TechLead"] = "tech_lead";
})(DevUserJobTitle = exports.DevUserJobTitle || (exports.DevUserJobTitle = {}));
/** Type of engagement. */
var EngagementType;
(function (EngagementType) {
    EngagementType["Call"] = "call";
    EngagementType["Conversation"] = "conversation";
    EngagementType["Custom"] = "custom";
    EngagementType["Default"] = "default";
    EngagementType["Email"] = "email";
    EngagementType["LinkedIn"] = "linked_in";
    EngagementType["Meeting"] = "meeting";
    EngagementType["Offline"] = "offline";
    EngagementType["Survey"] = "survey";
})(EngagementType = exports.EngagementType || (exports.EngagementType = {}));
/** The type of engagement. */
var EngagementsCreateRequestEngagementType;
(function (EngagementsCreateRequestEngagementType) {
    EngagementsCreateRequestEngagementType["Call"] = "call";
    EngagementsCreateRequestEngagementType["Default"] = "default";
    EngagementsCreateRequestEngagementType["Email"] = "email";
    EngagementsCreateRequestEngagementType["LinkedIn"] = "linked_in";
    EngagementsCreateRequestEngagementType["Offline"] = "offline";
})(EngagementsCreateRequestEngagementType = exports.EngagementsCreateRequestEngagementType || (exports.EngagementsCreateRequestEngagementType = {}));
var ErrorBadRequestType;
(function (ErrorBadRequestType) {
    ErrorBadRequestType["ArtifactAlreadyAttachedToAParent"] = "artifact_already_attached_to_a_parent";
    ErrorBadRequestType["BadRequest"] = "bad_request";
    ErrorBadRequestType["InvalidApiVersion"] = "invalid_api_version";
    ErrorBadRequestType["InvalidEnumValue"] = "invalid_enum_value";
    ErrorBadRequestType["InvalidField"] = "invalid_field";
    ErrorBadRequestType["InvalidId"] = "invalid_id";
    ErrorBadRequestType["MergeWorksError"] = "merge_works_error";
    ErrorBadRequestType["MissingDependency"] = "missing_dependency";
    ErrorBadRequestType["MissingRequiredField"] = "missing_required_field";
    ErrorBadRequestType["ParseError"] = "parse_error";
    ErrorBadRequestType["StaleSchemaFragments"] = "stale_schema_fragments";
    ErrorBadRequestType["UnexpectedIdType"] = "unexpected_id_type";
    ErrorBadRequestType["UnexpectedJsonType"] = "unexpected_json_type";
    ErrorBadRequestType["ValueNotPermitted"] = "value_not_permitted";
})(ErrorBadRequestType = exports.ErrorBadRequestType || (exports.ErrorBadRequestType = {}));
var ErrorBadRequestUnexpectedJsonTypeType;
(function (ErrorBadRequestUnexpectedJsonTypeType) {
    ErrorBadRequestUnexpectedJsonTypeType["Array"] = "array";
    ErrorBadRequestUnexpectedJsonTypeType["Bool"] = "bool";
    ErrorBadRequestUnexpectedJsonTypeType["Null"] = "null";
    ErrorBadRequestUnexpectedJsonTypeType["Number"] = "number";
    ErrorBadRequestUnexpectedJsonTypeType["Object"] = "object";
    ErrorBadRequestUnexpectedJsonTypeType["String"] = "string";
})(ErrorBadRequestUnexpectedJsonTypeType = exports.ErrorBadRequestUnexpectedJsonTypeType || (exports.ErrorBadRequestUnexpectedJsonTypeType = {}));
var ErrorConflictType;
(function (ErrorConflictType) {
    ErrorConflictType["Conflict"] = "conflict";
})(ErrorConflictType = exports.ErrorConflictType || (exports.ErrorConflictType = {}));
var ErrorForbiddenType;
(function (ErrorForbiddenType) {
    ErrorForbiddenType["Forbidden"] = "forbidden";
})(ErrorForbiddenType = exports.ErrorForbiddenType || (exports.ErrorForbiddenType = {}));
var ErrorInternalServerErrorType;
(function (ErrorInternalServerErrorType) {
    ErrorInternalServerErrorType["InternalError"] = "internal_error";
})(ErrorInternalServerErrorType = exports.ErrorInternalServerErrorType || (exports.ErrorInternalServerErrorType = {}));
var ErrorNotFoundType;
(function (ErrorNotFoundType) {
    ErrorNotFoundType["NotFound"] = "not_found";
})(ErrorNotFoundType = exports.ErrorNotFoundType || (exports.ErrorNotFoundType = {}));
var ErrorServiceUnavailableType;
(function (ErrorServiceUnavailableType) {
    ErrorServiceUnavailableType["ServiceUnavailable"] = "service_unavailable";
})(ErrorServiceUnavailableType = exports.ErrorServiceUnavailableType || (exports.ErrorServiceUnavailableType = {}));
var ErrorTooManyRequestsType;
(function (ErrorTooManyRequestsType) {
    ErrorTooManyRequestsType["TooManyRequests"] = "too_many_requests";
})(ErrorTooManyRequestsType = exports.ErrorTooManyRequestsType || (exports.ErrorTooManyRequestsType = {}));
var ErrorUnauthorizedType;
(function (ErrorUnauthorizedType) {
    ErrorUnauthorizedType["Unauthenticated"] = "unauthenticated";
})(ErrorUnauthorizedType = exports.ErrorUnauthorizedType || (exports.ErrorUnauthorizedType = {}));
var EventFetchedResult;
(function (EventFetchedResult) {
    EventFetchedResult["Forbidden"] = "forbidden";
    EventFetchedResult["NotFound"] = "not_found";
    EventFetchedResult["Ok"] = "ok";
})(EventFetchedResult = exports.EventFetchedResult || (exports.EventFetchedResult = {}));
/**
 * Status of the event source. Note that paused/blocked event sources
 * return NotFound error on triggering.
 */
var EventSourceStatus;
(function (EventSourceStatus) {
    EventSourceStatus["Active"] = "active";
    EventSourceStatus["Blocked"] = "blocked";
    EventSourceStatus["Paused"] = "paused";
})(EventSourceStatus = exports.EventSourceStatus || (exports.EventSourceStatus = {}));
var FieldValueType;
(function (FieldValueType) {
    FieldValueType["Bool"] = "bool";
    FieldValueType["BoolList"] = "bool_list";
    FieldValueType["Composite"] = "composite";
    FieldValueType["CompositeList"] = "composite_list";
    FieldValueType["Date"] = "date";
    FieldValueType["DateList"] = "date_list";
    FieldValueType["DateTime"] = "date_time";
    FieldValueType["DateTimeList"] = "date_time_list";
    FieldValueType["Double"] = "double";
    FieldValueType["DoubleList"] = "double_list";
    FieldValueType["Id"] = "id";
    FieldValueType["IdList"] = "id_list";
    FieldValueType["Int"] = "int";
    FieldValueType["IntList"] = "int_list";
    FieldValueType["Stage"] = "stage";
    FieldValueType["String"] = "string";
    FieldValueType["StringList"] = "string_list";
    FieldValueType["TagSummary"] = "tag_summary";
    FieldValueType["TagSummaryList"] = "tag_summary_list";
})(FieldValueType = exports.FieldValueType || (exports.FieldValueType = {}));
/** Event type of the notification. */
var GenericNotificationEventType;
(function (GenericNotificationEventType) {
    GenericNotificationEventType["Alert"] = "alert";
    GenericNotificationEventType["Assignment"] = "assignment";
    GenericNotificationEventType["Mention"] = "mention";
    GenericNotificationEventType["Reminder"] = "reminder";
    GenericNotificationEventType["Update"] = "update";
})(GenericNotificationEventType = exports.GenericNotificationEventType || (exports.GenericNotificationEventType = {}));
/** Creation source of the group. */
var GroupIngestionSource;
(function (GroupIngestionSource) {
    GroupIngestionSource["Airdrop"] = "airdrop";
    GroupIngestionSource["Scim"] = "scim";
})(GroupIngestionSource = exports.GroupIngestionSource || (exports.GroupIngestionSource = {}));
/** Type of the members in the group. */
var GroupMemberType;
(function (GroupMemberType) {
    GroupMemberType["DevUser"] = "dev_user";
    GroupMemberType["RevUser"] = "rev_user";
})(GroupMemberType = exports.GroupMemberType || (exports.GroupMemberType = {}));
/** Type of the group. */
var GroupType;
(function (GroupType) {
    GroupType["Dynamic"] = "dynamic";
    GroupType["Static"] = "static";
})(GroupType = exports.GroupType || (exports.GroupType = {}));
/** Denotes the use case of the grouped vista. */
var GroupedVistaFlavor;
(function (GroupedVistaFlavor) {
    GroupedVistaFlavor["Nnl"] = "nnl";
    GroupedVistaFlavor["SprintBoard"] = "sprint_board";
    GroupedVistaFlavor["SupportInbox"] = "support_inbox";
})(GroupedVistaFlavor = exports.GroupedVistaFlavor || (exports.GroupedVistaFlavor = {}));
/** Priority of the work based upon impact and criticality. */
var IssuePriority;
(function (IssuePriority) {
    IssuePriority["P0"] = "p0";
    IssuePriority["P1"] = "p1";
    IssuePriority["P2"] = "p2";
    IssuePriority["P3"] = "p3";
})(IssuePriority = exports.IssuePriority || (exports.IssuePriority = {}));
var LinkEndpointType;
(function (LinkEndpointType) {
    LinkEndpointType["Account"] = "account";
    LinkEndpointType["Capability"] = "capability";
    LinkEndpointType["Conversation"] = "conversation";
    LinkEndpointType["DevUser"] = "dev_user";
    LinkEndpointType["Enhancement"] = "enhancement";
    LinkEndpointType["Feature"] = "feature";
    LinkEndpointType["Issue"] = "issue";
    LinkEndpointType["Opportunity"] = "opportunity";
    LinkEndpointType["Product"] = "product";
    LinkEndpointType["RevOrg"] = "rev_org";
    LinkEndpointType["RevUser"] = "rev_user";
    LinkEndpointType["Task"] = "task";
    LinkEndpointType["Ticket"] = "ticket";
})(LinkEndpointType = exports.LinkEndpointType || (exports.LinkEndpointType = {}));
/** Type of link used to define the relationship. */
var LinkType;
(function (LinkType) {
    LinkType["CustomLink"] = "custom_link";
    LinkType["DevelopedWith"] = "developed_with";
    LinkType["Imports"] = "imports";
    LinkType["IsAnalyzedBy"] = "is_analyzed_by";
    LinkType["IsConvertedTo"] = "is_converted_to";
    LinkType["IsDependentOn"] = "is_dependent_on";
    LinkType["IsDuplicateOf"] = "is_duplicate_of";
    LinkType["IsFollowUpOf"] = "is_follow_up_of";
    LinkType["IsMergedInto"] = "is_merged_into";
    LinkType["IsParentOf"] = "is_parent_of";
    LinkType["IsPartOf"] = "is_part_of";
    LinkType["IsRelatedTo"] = "is_related_to";
    LinkType["Serves"] = "serves";
})(LinkType = exports.LinkType || (exports.LinkType = {}));
/**
 * The direction of link, which can either be outbound such that the
 * object is the source of the link, otherwise inbound where the object is
 * the target of the link.
 */
var LinksDirection;
(function (LinksDirection) {
    LinksDirection["IsSource"] = "is_source";
    LinksDirection["IsTarget"] = "is_target";
})(LinksDirection = exports.LinksDirection || (exports.LinksDirection = {}));
/**
 * The iteration mode to use. If "after", then entries after the provided
 * cursor will be returned, or if no cursor is provided, then from the
 * beginning. If "before", then entries before the provided cursor will be
 * returned, or if no cursor is provided, then from the end. Entries will
 * always be returned in the specified sort-by order.
 */
var ListMode;
(function (ListMode) {
    ListMode["After"] = "after";
    ListMode["Before"] = "before";
})(ListMode = exports.ListMode || (exports.ListMode = {}));
var MemberType;
(function (MemberType) {
    MemberType["DevUser"] = "dev_user";
    MemberType["RevUser"] = "rev_user";
    MemberType["SysUser"] = "sys_user";
})(MemberType = exports.MemberType || (exports.MemberType = {}));
var MetricActionExecuteRequestAction;
(function (MetricActionExecuteRequestAction) {
    MetricActionExecuteRequestAction["Complete"] = "complete";
    MetricActionExecuteRequestAction["Pause"] = "pause";
    MetricActionExecuteRequestAction["Restart"] = "restart";
    MetricActionExecuteRequestAction["Resume"] = "resume";
    MetricActionExecuteRequestAction["Start"] = "start";
})(MetricActionExecuteRequestAction = exports.MetricActionExecuteRequestAction || (exports.MetricActionExecuteRequestAction = {}));
/** The list of item types on which the metric might be applied. */
var MetricDefinitionAppliesTo;
(function (MetricDefinitionAppliesTo) {
    MetricDefinitionAppliesTo["Conversation"] = "conversation";
    MetricDefinitionAppliesTo["Issue"] = "issue";
    MetricDefinitionAppliesTo["Ticket"] = "ticket";
})(MetricDefinitionAppliesTo = exports.MetricDefinitionAppliesTo || (exports.MetricDefinitionAppliesTo = {}));
/**
 * The type of the metric. 'time' metrics track the time spent in some
 * state, supporting operations like 'start', 'stop', 'pause', 'resume'.
 * 'value' metrics track a value, supporting operations like 'set',
 * 'increment', 'decrement'.
 */
var MetricDefinitionMetricType;
(function (MetricDefinitionMetricType) {
    MetricDefinitionMetricType["Time"] = "time";
    MetricDefinitionMetricType["Value"] = "value";
})(MetricDefinitionMetricType = exports.MetricDefinitionMetricType || (exports.MetricDefinitionMetricType = {}));
/**
 * The status of the metric. 'active' metrics can be used to create new
 * SLAs, while 'inactive' metrics can not be used in new SLAs. Metrics can
 * be updated between 'active' and 'inactive' states.
 */
var MetricDefinitionStatus;
(function (MetricDefinitionStatus) {
    MetricDefinitionStatus["Active"] = "active";
    MetricDefinitionStatus["Inactive"] = "inactive";
})(MetricDefinitionStatus = exports.MetricDefinitionStatus || (exports.MetricDefinitionStatus = {}));
/** Forecast category of the opportunity. */
var OpportunityForecastCategory;
(function (OpportunityForecastCategory) {
    OpportunityForecastCategory["Commit"] = "commit";
    OpportunityForecastCategory["Omitted"] = "omitted";
    OpportunityForecastCategory["Pipeline"] = "pipeline";
    OpportunityForecastCategory["StrongUpside"] = "strong_upside";
    OpportunityForecastCategory["Upside"] = "upside";
    OpportunityForecastCategory["Won"] = "won";
})(OpportunityForecastCategory = exports.OpportunityForecastCategory || (exports.OpportunityForecastCategory = {}));
/** Priority of the opportunity. */
var OpportunityPriority;
(function (OpportunityPriority) {
    OpportunityPriority["P0"] = "p0";
    OpportunityPriority["P1"] = "p1";
    OpportunityPriority["P2"] = "p2";
    OpportunityPriority["P3"] = "p3";
})(OpportunityPriority = exports.OpportunityPriority || (exports.OpportunityPriority = {}));
/** The environment of the Org. Defaults to 'production' if not specified. */
var OrgEnvironment;
(function (OrgEnvironment) {
    OrgEnvironment["Production"] = "production";
    OrgEnvironment["Staging"] = "staging";
    OrgEnvironment["Test"] = "test";
})(OrgEnvironment = exports.OrgEnvironment || (exports.OrgEnvironment = {}));
/**
 * Status determines how an item can be used. In 'draft' status an item
 * can be edited but can't be used. When 'published' the item can longer
 * be edited but can be used. 'Archived' is read-only.
 */
var OrgScheduleFragmentStatus;
(function (OrgScheduleFragmentStatus) {
    OrgScheduleFragmentStatus["Archived"] = "archived";
    OrgScheduleFragmentStatus["Draft"] = "draft";
    OrgScheduleFragmentStatus["Published"] = "published";
})(OrgScheduleFragmentStatus = exports.OrgScheduleFragmentStatus || (exports.OrgScheduleFragmentStatus = {}));
/**
 * Status determines how an item can be used. In 'draft' status an item
 * can be edited but can't be used. When 'published' the item can longer
 * be edited but can be used. 'Archived' is read-only.
 */
var OrgScheduleStatus;
(function (OrgScheduleStatus) {
    OrgScheduleStatus["Archived"] = "archived";
    OrgScheduleStatus["Draft"] = "draft";
    OrgScheduleStatus["Published"] = "published";
})(OrgScheduleStatus = exports.OrgScheduleStatus || (exports.OrgScheduleStatus = {}));
var OrgType;
(function (OrgType) {
    OrgType["Account"] = "account";
    OrgType["RevOrg"] = "rev_org";
})(OrgType = exports.OrgType || (exports.OrgType = {}));
var PartType;
(function (PartType) {
    PartType["Capability"] = "capability";
    PartType["Enhancement"] = "enhancement";
    PartType["Feature"] = "feature";
    PartType["Product"] = "product";
})(PartType = exports.PartType || (exports.PartType = {}));
var PreferencesType;
(function (PreferencesType) {
    PreferencesType["UserPreferences"] = "user_preferences";
})(PreferencesType = exports.PreferencesType || (exports.PreferencesType = {}));
/** Status of the question answer. */
var QuestionAnswerStatus;
(function (QuestionAnswerStatus) {
    QuestionAnswerStatus["Archived"] = "archived";
    QuestionAnswerStatus["Discarded"] = "discarded";
    QuestionAnswerStatus["Draft"] = "draft";
    QuestionAnswerStatus["Published"] = "published";
    QuestionAnswerStatus["ReviewNeeded"] = "review_needed";
})(QuestionAnswerStatus = exports.QuestionAnswerStatus || (exports.QuestionAnswerStatus = {}));
var SchemaFieldDescriptorArrayTypeBaseType;
(function (SchemaFieldDescriptorArrayTypeBaseType) {
    SchemaFieldDescriptorArrayTypeBaseType["Bool"] = "bool";
    SchemaFieldDescriptorArrayTypeBaseType["Composite"] = "composite";
    SchemaFieldDescriptorArrayTypeBaseType["Date"] = "date";
    SchemaFieldDescriptorArrayTypeBaseType["Double"] = "double";
    SchemaFieldDescriptorArrayTypeBaseType["Enum"] = "enum";
    SchemaFieldDescriptorArrayTypeBaseType["Id"] = "id";
    SchemaFieldDescriptorArrayTypeBaseType["Int"] = "int";
    SchemaFieldDescriptorArrayTypeBaseType["RichText"] = "rich_text";
    SchemaFieldDescriptorArrayTypeBaseType["Struct"] = "struct";
    SchemaFieldDescriptorArrayTypeBaseType["Text"] = "text";
    SchemaFieldDescriptorArrayTypeBaseType["Timestamp"] = "timestamp";
    SchemaFieldDescriptorArrayTypeBaseType["Tokens"] = "tokens";
    SchemaFieldDescriptorArrayTypeBaseType["Uenum"] = "uenum";
})(SchemaFieldDescriptorArrayTypeBaseType = exports.SchemaFieldDescriptorArrayTypeBaseType || (exports.SchemaFieldDescriptorArrayTypeBaseType = {}));
var SchemaFieldDescriptorFieldType;
(function (SchemaFieldDescriptorFieldType) {
    SchemaFieldDescriptorFieldType["Array"] = "array";
    SchemaFieldDescriptorFieldType["Bool"] = "bool";
    SchemaFieldDescriptorFieldType["Composite"] = "composite";
    SchemaFieldDescriptorFieldType["Date"] = "date";
    SchemaFieldDescriptorFieldType["Double"] = "double";
    SchemaFieldDescriptorFieldType["Enum"] = "enum";
    SchemaFieldDescriptorFieldType["Id"] = "id";
    SchemaFieldDescriptorFieldType["Int"] = "int";
    SchemaFieldDescriptorFieldType["RichText"] = "rich_text";
    SchemaFieldDescriptorFieldType["Struct"] = "struct";
    SchemaFieldDescriptorFieldType["Text"] = "text";
    SchemaFieldDescriptorFieldType["Timestamp"] = "timestamp";
    SchemaFieldDescriptorFieldType["Tokens"] = "tokens";
    SchemaFieldDescriptorFieldType["Uenum"] = "uenum";
    SchemaFieldDescriptorFieldType["Unknown"] = "unknown";
})(SchemaFieldDescriptorFieldType = exports.SchemaFieldDescriptorFieldType || (exports.SchemaFieldDescriptorFieldType = {}));
/** The namespaces for hybrid search. */
var SearchHybridNamespace;
(function (SearchHybridNamespace) {
    SearchHybridNamespace["Article"] = "article";
    SearchHybridNamespace["Conversation"] = "conversation";
    SearchHybridNamespace["Dataset"] = "dataset";
    SearchHybridNamespace["Incident"] = "incident";
    SearchHybridNamespace["Issue"] = "issue";
    SearchHybridNamespace["Part"] = "part";
    SearchHybridNamespace["QuestionAnswer"] = "question_answer";
    SearchHybridNamespace["Ticket"] = "ticket";
    SearchHybridNamespace["Widget"] = "widget";
    SearchHybridNamespace["Work"] = "work";
})(SearchHybridNamespace = exports.SearchHybridNamespace || (exports.SearchHybridNamespace = {}));
/** The namespaces to search in. */
var SearchNamespace;
(function (SearchNamespace) {
    SearchNamespace["Account"] = "account";
    SearchNamespace["Article"] = "article";
    SearchNamespace["Capability"] = "capability";
    SearchNamespace["Component"] = "component";
    SearchNamespace["Conversation"] = "conversation";
    SearchNamespace["CustomObject"] = "custom_object";
    SearchNamespace["CustomPart"] = "custom_part";
    SearchNamespace["CustomWork"] = "custom_work";
    SearchNamespace["Dashboard"] = "dashboard";
    SearchNamespace["DevUser"] = "dev_user";
    SearchNamespace["Enhancement"] = "enhancement";
    SearchNamespace["Feature"] = "feature";
    SearchNamespace["Group"] = "group";
    SearchNamespace["Issue"] = "issue";
    SearchNamespace["Linkable"] = "linkable";
    SearchNamespace["Microservice"] = "microservice";
    SearchNamespace["ObjectMember"] = "object_member";
    SearchNamespace["Opportunity"] = "opportunity";
    SearchNamespace["Product"] = "product";
    SearchNamespace["Project"] = "project";
    SearchNamespace["QuestionAnswer"] = "question_answer";
    SearchNamespace["RevOrg"] = "rev_org";
    SearchNamespace["RevUser"] = "rev_user";
    SearchNamespace["Runnable"] = "runnable";
    SearchNamespace["ServiceAccount"] = "service_account";
    SearchNamespace["SysUser"] = "sys_user";
    SearchNamespace["Tag"] = "tag";
    SearchNamespace["Task"] = "task";
    SearchNamespace["Ticket"] = "ticket";
    SearchNamespace["Vista"] = "vista";
})(SearchNamespace = exports.SearchNamespace || (exports.SearchNamespace = {}));
var SearchResultType;
(function (SearchResultType) {
    SearchResultType["Account"] = "account";
    SearchResultType["Article"] = "article";
    SearchResultType["Artifact"] = "artifact";
    SearchResultType["Conversation"] = "conversation";
    SearchResultType["CustomObject"] = "custom_object";
    SearchResultType["Dashboard"] = "dashboard";
    SearchResultType["Group"] = "group";
    SearchResultType["Link"] = "link";
    SearchResultType["ObjectMember"] = "object_member";
    SearchResultType["Org"] = "org";
    SearchResultType["Part"] = "part";
    SearchResultType["QuestionAnswer"] = "question_answer";
    SearchResultType["Tag"] = "tag";
    SearchResultType["User"] = "user";
    SearchResultType["Vista"] = "vista";
    SearchResultType["Work"] = "work";
})(SearchResultType = exports.SearchResultType || (exports.SearchResultType = {}));
/** Search sort by parameters. */
var SearchSortByParam;
(function (SearchSortByParam) {
    SearchSortByParam["CreatedDate"] = "created_date";
    SearchSortByParam["ModifiedDate"] = "modified_date";
    SearchSortByParam["Relevance"] = "relevance";
})(SearchSortByParam = exports.SearchSortByParam || (exports.SearchSortByParam = {}));
/** Search sort order parameters. */
var SearchSortOrderParam;
(function (SearchSortOrderParam) {
    SearchSortOrderParam["Asc"] = "asc";
    SearchSortOrderParam["Desc"] = "desc";
})(SearchSortOrderParam = exports.SearchSortOrderParam || (exports.SearchSortOrderParam = {}));
var SendNotificationType;
(function (SendNotificationType) {
    SendNotificationType["GenericNotification"] = "generic_notification";
})(SendNotificationType = exports.SendNotificationType || (exports.SendNotificationType = {}));
/**
 * The object types on which the SLA applies. An external SLA can apply to
 * multiple object types, but an internal SLA can apply to only one object
 * type.
 */
var SlaAppliesTo;
(function (SlaAppliesTo) {
    SlaAppliesTo["Conversation"] = "conversation";
    SlaAppliesTo["Issue"] = "issue";
    SlaAppliesTo["Ticket"] = "ticket";
})(SlaAppliesTo = exports.SlaAppliesTo || (exports.SlaAppliesTo = {}));
/**
 * Specifies the frequency of when the contractually-meaningful evaluation
 * of the SLA happens. The organization for their own information might
 * evaluate the various metrics contained in the policy as often as we can
 * make it feasible for them, but only the evaluation at the end of the
 * evaluation period triggers a compensation and needs to be shared with
 * the customer.
 */
var SlaEvaluationPeriod;
(function (SlaEvaluationPeriod) {
    SlaEvaluationPeriod["Monthly"] = "monthly";
    SlaEvaluationPeriod["Quarterly"] = "quarterly";
    SlaEvaluationPeriod["Weekly"] = "weekly";
    SlaEvaluationPeriod["Yearly"] = "yearly";
})(SlaEvaluationPeriod = exports.SlaEvaluationPeriod || (exports.SlaEvaluationPeriod = {}));
/** The item type for which the SLA policy applies. */
var SlaSelectorAppliesTo;
(function (SlaSelectorAppliesTo) {
    SlaSelectorAppliesTo["Conversation"] = "conversation";
    SlaSelectorAppliesTo["Issue"] = "issue";
    SlaSelectorAppliesTo["Ticket"] = "ticket";
})(SlaSelectorAppliesTo = exports.SlaSelectorAppliesTo || (exports.SlaSelectorAppliesTo = {}));
/** The SLA policy applies to conversations with these priorities. */
var SlaSelectorPriority;
(function (SlaSelectorPriority) {
    SlaSelectorPriority["P0"] = "p0";
    SlaSelectorPriority["P1"] = "p1";
    SlaSelectorPriority["P2"] = "p2";
})(SlaSelectorPriority = exports.SlaSelectorPriority || (exports.SlaSelectorPriority = {}));
/** The SLA policy applies to tickets with these severities. */
var SlaSelectorSeverity;
(function (SlaSelectorSeverity) {
    SlaSelectorSeverity["Blocker"] = "blocker";
    SlaSelectorSeverity["High"] = "high";
    SlaSelectorSeverity["Low"] = "low";
    SlaSelectorSeverity["Medium"] = "medium";
})(SlaSelectorSeverity = exports.SlaSelectorSeverity || (exports.SlaSelectorSeverity = {}));
/**
 * Status determines how an item can be used. In 'draft' status an item
 * can be edited but can't be used. When 'published' the item can longer
 * be edited but can be used. 'Archived' is read-only.
 */
var SlaStatus;
(function (SlaStatus) {
    SlaStatus["Archived"] = "archived";
    SlaStatus["Draft"] = "draft";
    SlaStatus["Published"] = "published";
})(SlaStatus = exports.SlaStatus || (exports.SlaStatus = {}));
/**
 * The stage of the SLA. This is the metric stage which is closest to
 * breach.
 */
var SlaSummaryStage;
(function (SlaSummaryStage) {
    SlaSummaryStage["Breached"] = "breached";
    SlaSummaryStage["Completed"] = "completed";
    SlaSummaryStage["Paused"] = "paused";
    SlaSummaryStage["Running"] = "running";
    SlaSummaryStage["Warning"] = "warning";
})(SlaSummaryStage = exports.SlaSummaryStage || (exports.SlaSummaryStage = {}));
/** Type of the SLA. */
var SlaType;
(function (SlaType) {
    SlaType["External"] = "external";
    SlaType["Internal"] = "internal";
})(SlaType = exports.SlaType || (exports.SlaType = {}));
var SlasFilterAppliesToOperatorType;
(function (SlasFilterAppliesToOperatorType) {
    SlasFilterAppliesToOperatorType["All"] = "all";
    SlasFilterAppliesToOperatorType["Any"] = "any";
})(SlasFilterAppliesToOperatorType = exports.SlasFilterAppliesToOperatorType || (exports.SlasFilterAppliesToOperatorType = {}));
/** Logical grouping of snap widgets. Useful for filtering. */
var SnapWidgetNamespace;
(function (SnapWidgetNamespace) {
    SnapWidgetNamespace["AiAssistantMessage"] = "ai_assistant_message";
    SnapWidgetNamespace["CommentSuggestionReplies"] = "comment_suggestion_replies";
    SnapWidgetNamespace["EmailPreview"] = "email_preview";
    SnapWidgetNamespace["LinkPreview"] = "link_preview";
    SnapWidgetNamespace["PlugNudge"] = "plug_nudge";
})(SnapWidgetNamespace = exports.SnapWidgetNamespace || (exports.SnapWidgetNamespace = {}));
/** The status of the snap widget. */
var SnapWidgetStatus;
(function (SnapWidgetStatus) {
    SnapWidgetStatus["Draft"] = "draft";
    SnapWidgetStatus["Published"] = "published";
})(SnapWidgetStatus = exports.SnapWidgetStatus || (exports.SnapWidgetStatus = {}));
var SnapWidgetType;
(function (SnapWidgetType) {
    SnapWidgetType["EmailPreview"] = "email_preview";
})(SnapWidgetType = exports.SnapWidgetType || (exports.SnapWidgetType = {}));
var SnapWidgetsCreateRequestType;
(function (SnapWidgetsCreateRequestType) {
    SnapWidgetsCreateRequestType["EmailPreview"] = "email_preview";
})(SnapWidgetsCreateRequestType = exports.SnapWidgetsCreateRequestType || (exports.SnapWidgetsCreateRequestType = {}));
/** Type of stage validation options when creating an object. */
var StageValidationOptionForCreate;
(function (StageValidationOptionForCreate) {
    StageValidationOptionForCreate["AllowNonStart"] = "allow_non_start";
})(StageValidationOptionForCreate = exports.StageValidationOptionForCreate || (exports.StageValidationOptionForCreate = {}));
/** Type of state validation options when updating the stage of an object. */
var StageValidationOptionForUpdate;
(function (StageValidationOptionForUpdate) {
    StageValidationOptionForUpdate["AllowInvalidTransition"] = "allow_invalid_transition";
})(StageValidationOptionForUpdate = exports.StageValidationOptionForUpdate || (exports.StageValidationOptionForUpdate = {}));
var StockSchemaFragmentsListRequestFilterPreset;
(function (StockSchemaFragmentsListRequestFilterPreset) {
    StockSchemaFragmentsListRequestFilterPreset["CustomizableTypesPreset"] = "customizable_types_preset";
    StockSchemaFragmentsListRequestFilterPreset["NoPreset"] = "no_preset";
})(StockSchemaFragmentsListRequestFilterPreset = exports.StockSchemaFragmentsListRequestFilterPreset || (exports.StockSchemaFragmentsListRequestFilterPreset = {}));
var StockSchemaFragmentsListRequestPrune;
(function (StockSchemaFragmentsListRequestPrune) {
    StockSchemaFragmentsListRequestPrune["CompositeSchemas"] = "composite_schemas";
    StockSchemaFragmentsListRequestPrune["Fields"] = "fields";
})(StockSchemaFragmentsListRequestPrune = exports.StockSchemaFragmentsListRequestPrune || (exports.StockSchemaFragmentsListRequestPrune = {}));
/** Status of the sync for the object. */
var SyncInStatus;
(function (SyncInStatus) {
    SyncInStatus["Failed"] = "failed";
    SyncInStatus["Modified"] = "modified";
    SyncInStatus["Staged"] = "staged";
    SyncInStatus["Succeeded"] = "succeeded";
})(SyncInStatus = exports.SyncInStatus || (exports.SyncInStatus = {}));
var SyncMetadataFilterSyncInFilterStatus;
(function (SyncMetadataFilterSyncInFilterStatus) {
    SyncMetadataFilterSyncInFilterStatus["Failed"] = "failed";
    SyncMetadataFilterSyncInFilterStatus["Modified"] = "modified";
    SyncMetadataFilterSyncInFilterStatus["Staged"] = "staged";
    SyncMetadataFilterSyncInFilterStatus["Succeeded"] = "succeeded";
})(SyncMetadataFilterSyncInFilterStatus = exports.SyncMetadataFilterSyncInFilterStatus || (exports.SyncMetadataFilterSyncInFilterStatus = {}));
var SyncMetadataFilterSyncOutFilterStatus;
(function (SyncMetadataFilterSyncOutFilterStatus) {
    SyncMetadataFilterSyncOutFilterStatus["Failed"] = "failed";
    SyncMetadataFilterSyncOutFilterStatus["Modified"] = "modified";
    SyncMetadataFilterSyncOutFilterStatus["Succeeded"] = "succeeded";
})(SyncMetadataFilterSyncOutFilterStatus = exports.SyncMetadataFilterSyncOutFilterStatus || (exports.SyncMetadataFilterSyncOutFilterStatus = {}));
/** Status of the sync for the object. */
var SyncOutStatus;
(function (SyncOutStatus) {
    SyncOutStatus["Failed"] = "failed";
    SyncOutStatus["Modified"] = "modified";
    SyncOutStatus["Succeeded"] = "succeeded";
})(SyncOutStatus = exports.SyncOutStatus || (exports.SyncOutStatus = {}));
/** Priority of the work based upon impact and criticality. */
var TaskPriority;
(function (TaskPriority) {
    TaskPriority["P0"] = "p0";
    TaskPriority["P1"] = "p1";
    TaskPriority["P2"] = "p2";
    TaskPriority["P3"] = "p3";
})(TaskPriority = exports.TaskPriority || (exports.TaskPriority = {}));
/** Channels of the ticket. */
var TicketChannels;
(function (TicketChannels) {
    TicketChannels["Email"] = "email";
    TicketChannels["Plug"] = "plug";
    TicketChannels["Slack"] = "slack";
    TicketChannels["Twilio"] = "twilio";
    TicketChannels["TwilioSms"] = "twilio_sms";
})(TicketChannels = exports.TicketChannels || (exports.TicketChannels = {}));
/** Severity of the ticket. */
var TicketSeverity;
(function (TicketSeverity) {
    TicketSeverity["Blocker"] = "blocker";
    TicketSeverity["High"] = "high";
    TicketSeverity["Low"] = "low";
    TicketSeverity["Medium"] = "medium";
})(TicketSeverity = exports.TicketSeverity || (exports.TicketSeverity = {}));
/** The type of the event. */
var TimelineChangeEventEventType;
(function (TimelineChangeEventEventType) {
    TimelineChangeEventEventType["Annotated"] = "annotated";
    TimelineChangeEventEventType["Created"] = "created";
    TimelineChangeEventEventType["Deleted"] = "deleted";
    TimelineChangeEventEventType["Linked"] = "linked";
    TimelineChangeEventEventType["Updated"] = "updated";
})(TimelineChangeEventEventType = exports.TimelineChangeEventEventType || (exports.TimelineChangeEventEventType = {}));
/** The type of the body to use for the comment. */
var TimelineCommentBodyType;
(function (TimelineCommentBodyType) {
    TimelineCommentBodyType["Data"] = "data";
    TimelineCommentBodyType["SnapKit"] = "snap_kit";
    TimelineCommentBodyType["SnapWidget"] = "snap_widget";
    TimelineCommentBodyType["Text"] = "text";
})(TimelineCommentBodyType = exports.TimelineCommentBodyType || (exports.TimelineCommentBodyType = {}));
/** Describes collections of timeline entries. */
var TimelineEntriesCollection;
(function (TimelineEntriesCollection) {
    TimelineEntriesCollection["Discussions"] = "discussions";
    TimelineEntriesCollection["Events"] = "events";
})(TimelineEntriesCollection = exports.TimelineEntriesCollection || (exports.TimelineEntriesCollection = {}));
var TimelineEntriesCreateRequestType;
(function (TimelineEntriesCreateRequestType) {
    TimelineEntriesCreateRequestType["TimelineComment"] = "timeline_comment";
})(TimelineEntriesCreateRequestType = exports.TimelineEntriesCreateRequestType || (exports.TimelineEntriesCreateRequestType = {}));
var TimelineEntriesUpdateRequestType;
(function (TimelineEntriesUpdateRequestType) {
    TimelineEntriesUpdateRequestType["TimelineComment"] = "timeline_comment";
})(TimelineEntriesUpdateRequestType = exports.TimelineEntriesUpdateRequestType || (exports.TimelineEntriesUpdateRequestType = {}));
/** The type of object that the Timeline entry belongs to. */
var TimelineEntryObjectType;
(function (TimelineEntryObjectType) {
    TimelineEntryObjectType["Account"] = "account";
    TimelineEntryObjectType["Capability"] = "capability";
    TimelineEntryObjectType["Conversation"] = "conversation";
    TimelineEntryObjectType["Engagement"] = "engagement";
    TimelineEntryObjectType["Enhancement"] = "enhancement";
    TimelineEntryObjectType["Feature"] = "feature";
    TimelineEntryObjectType["Issue"] = "issue";
    TimelineEntryObjectType["Meeting"] = "meeting";
    TimelineEntryObjectType["Opportunity"] = "opportunity";
    TimelineEntryObjectType["Product"] = "product";
    TimelineEntryObjectType["RevOrg"] = "rev_org";
    TimelineEntryObjectType["RevUser"] = "rev_user";
    TimelineEntryObjectType["Task"] = "task";
    TimelineEntryObjectType["Ticket"] = "ticket";
    TimelineEntryObjectType["TimelineChangeEvent"] = "timeline_change_event";
    TimelineEntryObjectType["TimelineComment"] = "timeline_comment";
})(TimelineEntryObjectType = exports.TimelineEntryObjectType || (exports.TimelineEntryObjectType = {}));
/** Display panels for the Timeline entry. */
var TimelineEntryPanel;
(function (TimelineEntryPanel) {
    TimelineEntryPanel["Alerts"] = "alerts";
    TimelineEntryPanel["Broadcasts"] = "broadcasts";
    TimelineEntryPanel["CustomerChat"] = "customer_chat";
    TimelineEntryPanel["Discussions"] = "discussions";
    TimelineEntryPanel["Events"] = "events";
})(TimelineEntryPanel = exports.TimelineEntryPanel || (exports.TimelineEntryPanel = {}));
var TimelineEntryType;
(function (TimelineEntryType) {
    TimelineEntryType["TimelineChangeEvent"] = "timeline_change_event";
    TimelineEntryType["TimelineComment"] = "timeline_comment";
})(TimelineEntryType = exports.TimelineEntryType || (exports.TimelineEntryType = {}));
/**
 * The visibility of the entry. If 'private', then the entry is only
 * visible to the creator, 'internal' is visible with the Dev
 * organization, 'external' is visible to the Dev organzation and Rev
 * users, and 'public' is visible to all. If not set, then the default
 * visibility is 'external'.
 */
var TimelineEntryVisibility;
(function (TimelineEntryVisibility) {
    TimelineEntryVisibility["External"] = "external";
    TimelineEntryVisibility["Internal"] = "internal";
    TimelineEntryVisibility["Private"] = "private";
    TimelineEntryVisibility["Public"] = "public";
})(TimelineEntryVisibility = exports.TimelineEntryVisibility || (exports.TimelineEntryVisibility = {}));
/**
 * This defines the UOM unit type. For example, for 'number of video
 * calls', unit type will be a number.
 */
var UnitType;
(function (UnitType) {
    UnitType["Boolean"] = "boolean";
    UnitType["Number"] = "number";
})(UnitType = exports.UnitType || (exports.UnitType = {}));
/**
 * The granularity at which the metrics ingestion data is to be emitted
 * for the UOM.
 */
var UomMetricScope;
(function (UomMetricScope) {
    UomMetricScope["Org"] = "org";
    UomMetricScope["User"] = "user";
})(UomMetricScope = exports.UomMetricScope || (exports.UomMetricScope = {}));
/** State of the user. */
var UserState;
(function (UserState) {
    UserState["Active"] = "active";
    UserState["Deactivated"] = "deactivated";
    UserState["Deleted"] = "deleted";
    UserState["Locked"] = "locked";
    UserState["Shadow"] = "shadow";
    UserState["Unassigned"] = "unassigned";
})(UserState = exports.UserState || (exports.UserState = {}));
var UserType;
(function (UserType) {
    UserType["DevUser"] = "dev_user";
    UserType["RevUser"] = "rev_user";
    UserType["ServiceAccount"] = "service_account";
    UserType["SysUser"] = "sys_user";
})(UserType = exports.UserType || (exports.UserType = {}));
/** Defines the state of the group item. */
var VistaGroupItemState;
(function (VistaGroupItemState) {
    VistaGroupItemState["Active"] = "active";
    VistaGroupItemState["Completed"] = "completed";
    VistaGroupItemState["Planned"] = "planned";
})(VistaGroupItemState = exports.VistaGroupItemState || (exports.VistaGroupItemState = {}));
/** Type of the group object. */
var VistaGroupItemType;
(function (VistaGroupItemType) {
    VistaGroupItemType["Curated"] = "curated";
    VistaGroupItemType["Dynamic"] = "dynamic";
})(VistaGroupItemType = exports.VistaGroupItemType || (exports.VistaGroupItemType = {}));
/** Type of vista object. */
var VistaType;
(function (VistaType) {
    VistaType["Curated"] = "curated";
    VistaType["Dynamic"] = "dynamic";
    VistaType["Grouped"] = "grouped";
})(VistaType = exports.VistaType || (exports.VistaType = {}));
/** The event types that the webhook will receive. */
var WebhookEventType;
(function (WebhookEventType) {
    WebhookEventType["AccountCreated"] = "account_created";
    WebhookEventType["AccountDeleted"] = "account_deleted";
    WebhookEventType["AccountUpdated"] = "account_updated";
    WebhookEventType["ConversationCreated"] = "conversation_created";
    WebhookEventType["ConversationDeleted"] = "conversation_deleted";
    WebhookEventType["ConversationUpdated"] = "conversation_updated";
    WebhookEventType["DevUserCreated"] = "dev_user_created";
    WebhookEventType["DevUserDeleted"] = "dev_user_deleted";
    WebhookEventType["DevUserUpdated"] = "dev_user_updated";
    WebhookEventType["GroupCreated"] = "group_created";
    WebhookEventType["GroupDeleted"] = "group_deleted";
    WebhookEventType["GroupMemberAdded"] = "group_member_added";
    WebhookEventType["GroupMemberRemoved"] = "group_member_removed";
    WebhookEventType["GroupUpdated"] = "group_updated";
    WebhookEventType["LinkCreated"] = "link_created";
    WebhookEventType["LinkDeleted"] = "link_deleted";
    WebhookEventType["LinkUpdated"] = "link_updated";
    WebhookEventType["PartCreated"] = "part_created";
    WebhookEventType["PartDeleted"] = "part_deleted";
    WebhookEventType["PartUpdated"] = "part_updated";
    WebhookEventType["RevOrgCreated"] = "rev_org_created";
    WebhookEventType["RevOrgDeleted"] = "rev_org_deleted";
    WebhookEventType["RevOrgUpdated"] = "rev_org_updated";
    WebhookEventType["RevUserCreated"] = "rev_user_created";
    WebhookEventType["RevUserDeleted"] = "rev_user_deleted";
    WebhookEventType["RevUserUpdated"] = "rev_user_updated";
    WebhookEventType["SlaTrackerCreated"] = "sla_tracker_created";
    WebhookEventType["SlaTrackerDeleted"] = "sla_tracker_deleted";
    WebhookEventType["SlaTrackerUpdated"] = "sla_tracker_updated";
    WebhookEventType["SurveyCreated"] = "survey_created";
    WebhookEventType["SurveyDeleted"] = "survey_deleted";
    WebhookEventType["SurveyResponseCreated"] = "survey_response_created";
    WebhookEventType["SurveyResponseDeleted"] = "survey_response_deleted";
    WebhookEventType["SurveyResponseUpdated"] = "survey_response_updated";
    WebhookEventType["SurveyUpdated"] = "survey_updated";
    WebhookEventType["TagCreated"] = "tag_created";
    WebhookEventType["TagDeleted"] = "tag_deleted";
    WebhookEventType["TagUpdated"] = "tag_updated";
    WebhookEventType["TimelineEntryCreated"] = "timeline_entry_created";
    WebhookEventType["TimelineEntryDeleted"] = "timeline_entry_deleted";
    WebhookEventType["TimelineEntryUpdated"] = "timeline_entry_updated";
    WebhookEventType["Verify"] = "verify";
    WebhookEventType["WebhookCreated"] = "webhook_created";
    WebhookEventType["WebhookDeleted"] = "webhook_deleted";
    WebhookEventType["WebhookUpdated"] = "webhook_updated";
    WebhookEventType["WorkCreated"] = "work_created";
    WebhookEventType["WorkDeleted"] = "work_deleted";
    WebhookEventType["WorkFetched"] = "work_fetched";
    WebhookEventType["WorkUpdated"] = "work_updated";
})(WebhookEventType = exports.WebhookEventType || (exports.WebhookEventType = {}));
/** The status of the webhook. */
var WebhookStatus;
(function (WebhookStatus) {
    WebhookStatus["Active"] = "active";
    WebhookStatus["Inactive"] = "inactive";
    WebhookStatus["Unverified"] = "unverified";
})(WebhookStatus = exports.WebhookStatus || (exports.WebhookStatus = {}));
/** The action to update the webhook's status. */
var WebhooksUpdateAction;
(function (WebhooksUpdateAction) {
    WebhooksUpdateAction["Activate"] = "activate";
    WebhooksUpdateAction["Deactivate"] = "deactivate";
})(WebhooksUpdateAction = exports.WebhooksUpdateAction || (exports.WebhooksUpdateAction = {}));
var WorkType;
(function (WorkType) {
    WorkType["Issue"] = "issue";
    WorkType["Opportunity"] = "opportunity";
    WorkType["Task"] = "task";
    WorkType["Ticket"] = "ticket";
})(WorkType = exports.WorkType || (exports.WorkType = {}));
const axios_1 = __importDefault(require("axios"));
var ContentType;
(function (ContentType) {
    ContentType["Json"] = "application/json";
    ContentType["FormData"] = "multipart/form-data";
    ContentType["UrlEncoded"] = "application/x-www-form-urlencoded";
    ContentType["Text"] = "text/plain";
})(ContentType = exports.ContentType || (exports.ContentType = {}));
class HttpClient {
    constructor(_a = {}) {
        var { securityWorker, secure, format } = _a, axiosConfig = __rest(_a, ["securityWorker", "secure", "format"]);
        this.securityData = null;
        this.setSecurityData = (data) => {
            this.securityData = data;
        };
        this.request = (_b) => __awaiter(this, void 0, void 0, function* () {
            var { secure, path, type, query, format, body } = _b, params = __rest(_b, ["secure", "path", "type", "query", "format", "body"]);
            const secureParams = ((typeof secure === 'boolean' ? secure : this.secure) &&
                this.securityWorker &&
                (yield this.securityWorker(this.securityData))) ||
                {};
            const requestParams = this.mergeRequestParams(params, secureParams);
            const responseFormat = format || this.format || undefined;
            if (type === ContentType.FormData &&
                body &&
                body !== null &&
                typeof body === 'object') {
                body = this.createFormData(body);
            }
            if (type === ContentType.Text &&
                body &&
                body !== null &&
                typeof body !== 'string') {
                body = JSON.stringify(body);
            }
            return this.instance.request(Object.assign(Object.assign({}, requestParams), { headers: Object.assign(Object.assign({}, (requestParams.headers || {})), (type && type !== ContentType.FormData
                    ? { 'Content-Type': type }
                    : {})), params: query, responseType: responseFormat, data: body, url: path }));
        });
        this.instance = axios_1.default.create(Object.assign(Object.assign({}, axiosConfig), { baseURL: axiosConfig.baseURL || '{protocol}://{hostname}' }));
        this.secure = secure;
        this.format = format;
        this.securityWorker = securityWorker;
    }
    mergeRequestParams(params1, params2) {
        const method = params1.method || (params2 && params2.method);
        return Object.assign(Object.assign(Object.assign(Object.assign({}, this.instance.defaults), params1), (params2 || {})), { headers: Object.assign(Object.assign(Object.assign({}, ((method &&
                this.instance.defaults.headers[method.toLowerCase()]) ||
                {})), (params1.headers || {})), ((params2 && params2.headers) || {})) });
    }
    stringifyFormItem(formItem) {
        if (typeof formItem === 'object' && formItem !== null) {
            return JSON.stringify(formItem);
        }
        else {
            return `${formItem}`;
        }
    }
    createFormData(input) {
        return Object.keys(input || {}).reduce((formData, key) => {
            const property = input[key];
            const propertyContent = property instanceof Array ? property : [property];
            for (const formItem of propertyContent) {
                const isFileType = formItem instanceof Blob || formItem instanceof File;
                formData.append(key, isFileType ? formItem : this.stringifyFormItem(formItem));
            }
            return formData;
        }, new FormData());
    }
}
exports.HttpClient = HttpClient;
/**
 * @title DevRev REST API
 * @version 2022-10-20
 * @baseUrl {protocol}://{hostname}
 *
 * DevRev's REST API.
 */
class Api extends HttpClient {
    constructor() {
        super(...arguments);
        /**
         * @description Creates an account, which is a record representing a customer or an organization.
         *
         * @tags accounts
         * @name AccountsCreate
         * @request POST:/accounts.create
         * @secure
         */
        this.accountsCreate = (data, params = {}) => this.request(Object.assign({ path: `/accounts.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes an account.
         *
         * @tags accounts
         * @name AccountsDelete
         * @request POST:/accounts.delete
         * @secure
         */
        this.accountsDelete = (data, params = {}) => this.request(Object.assign({ path: `/accounts.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Exports a collection of accounts.
         *
         * @tags accounts
         * @name AccountsExport
         * @request GET:/accounts.export
         * @secure
         */
        this.accountsExport = (query, params = {}) => this.request(Object.assign({ path: `/accounts.export`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Exports a collection of accounts.
         *
         * @tags accounts
         * @name AccountsExportPost
         * @request POST:/accounts.export
         * @secure
         */
        this.accountsExportPost = (data, params = {}) => this.request(Object.assign({ path: `/accounts.export`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Retrieves an account's information.
         *
         * @tags accounts
         * @name AccountsGet
         * @request GET:/accounts.get
         * @secure
         */
        this.accountsGet = (query, params = {}) => this.request(Object.assign({ path: `/accounts.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Retrieves an account's information.
         *
         * @tags accounts
         * @name AccountsGetPost
         * @request POST:/accounts.get
         * @secure
         */
        this.accountsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/accounts.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a list of accounts.
         *
         * @tags accounts
         * @name AccountsList
         * @request GET:/accounts.list
         * @secure
         */
        this.accountsList = (query, params = {}) => this.request(Object.assign({ path: `/accounts.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a list of accounts.
         *
         * @tags accounts
         * @name AccountsListPost
         * @request POST:/accounts.list
         * @secure
         */
        this.accountsListPost = (data, params = {}) => this.request(Object.assign({ path: `/accounts.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an account's information.
         *
         * @tags accounts
         * @name AccountsUpdate
         * @request POST:/accounts.update
         * @secure
         */
        this.accountsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/accounts.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Get count of articles matching given filter.
         *
         * @tags articles
         * @name ArticlesCount
         * @request GET:/articles.count
         * @secure
         */
        this.articlesCount = (query, params = {}) => this.request(Object.assign({ path: `/articles.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get count of articles matching given filter.
         *
         * @tags articles
         * @name ArticlesCountPost
         * @request POST:/articles.count
         * @secure
         */
        this.articlesCountPost = (data, params = {}) => this.request(Object.assign({ path: `/articles.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Article is an object which can contain a URL or artifacts in the resource. It also contains the data regarding the owner, author, status and published date of the object. This call creates an article.
         *
         * @tags articles
         * @name CreateArticle
         * @request POST:/articles.create
         * @secure
         */
        this.createArticle = (data, params = {}) => this.request(Object.assign({ path: `/articles.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes an article.
         *
         * @tags articles
         * @name DeleteArticle
         * @request POST:/articles.delete
         * @secure
         */
        this.deleteArticle = (data, params = {}) => this.request(Object.assign({ path: `/articles.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets an article.
         *
         * @tags articles
         * @name GetArticle
         * @request GET:/articles.get
         * @secure
         */
        this.getArticle = (query, params = {}) => this.request(Object.assign({ path: `/articles.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an article.
         *
         * @tags articles
         * @name GetArticlePost
         * @request POST:/articles.get
         * @secure
         */
        this.getArticlePost = (data, params = {}) => this.request(Object.assign({ path: `/articles.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists a collection of articles.
         *
         * @tags articles
         * @name ListArticles
         * @request GET:/articles.list
         * @secure
         */
        this.listArticles = (query, params = {}) => this.request(Object.assign({ path: `/articles.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists a collection of articles.
         *
         * @tags articles
         * @name ListArticlesPost
         * @request POST:/articles.list
         * @secure
         */
        this.listArticlesPost = (data, params = {}) => this.request(Object.assign({ path: `/articles.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an article.
         *
         * @tags articles
         * @name UpdateArticle
         * @request POST:/articles.update
         * @secure
         */
        this.updateArticle = (data, params = {}) => this.request(Object.assign({ path: `/articles.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the requested artifact's information.
         *
         * @tags artifacts
         * @name ArtifactsGet
         * @request GET:/artifacts.get
         * @secure
         */
        this.artifactsGet = (query, params = {}) => this.request(Object.assign({ path: `/artifacts.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the requested artifact's information.
         *
         * @tags artifacts
         * @name ArtifactsGetPost
         * @request POST:/artifacts.get
         * @secure
         */
        this.artifactsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/artifacts.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description List the artifacts attached to an object.
         *
         * @tags artifacts
         * @name ArtifactsList
         * @request GET:/artifacts.list
         * @secure
         */
        this.artifactsList = (query, params = {}) => this.request(Object.assign({ path: `/artifacts.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List the artifacts attached to an object.
         *
         * @tags artifacts
         * @name ArtifactsListPost
         * @request POST:/artifacts.list
         * @secure
         */
        this.artifactsListPost = (data, params = {}) => this.request(Object.assign({ path: `/artifacts.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the download URL for the artifact.
         *
         * @tags artifacts
         * @name ArtifactsLocate
         * @request GET:/artifacts.locate
         * @secure
         */
        this.artifactsLocate = (query, params = {}) => this.request(Object.assign({ path: `/artifacts.locate`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the download URL for the artifact.
         *
         * @tags artifacts
         * @name ArtifactsLocatePost
         * @request POST:/artifacts.locate
         * @secure
         */
        this.artifactsLocatePost = (data, params = {}) => this.request(Object.assign({ path: `/artifacts.locate`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates an artifact and generates an upload URL for its data.
         *
         * @tags artifacts
         * @name ArtifactsPrepare
         * @request POST:/artifacts.prepare
         * @secure
         */
        this.artifactsPrepare = (data, params = {}) => this.request(Object.assign({ path: `/artifacts.prepare`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Prepares a new version for an artifact, returning the URL and form data to upload the updated file.
         *
         * @tags artifacts
         * @name ArtifactsVersionsPrepare
         * @request POST:/artifacts.versions.prepare
         * @secure
         */
        this.artifactsVersionsPrepare = (data, params = {}) => this.request(Object.assign({ path: `/artifacts.versions.prepare`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Retrieves audit logs.
         *
         * @tags compliance
         * @name ExportAuditLogs
         * @request POST:/audit-logs.fetch
         * @secure
         */
        this.exportAuditLogs = (data, params = {}) => this.request(Object.assign({ path: `/audit-logs.fetch`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a JWT corresponding to the requested token type for the authenticated user.
         *
         * @tags auth-tokens
         * @name AuthTokensCreate
         * @request POST:/auth-tokens.create
         * @secure
         */
        this.authTokensCreate = (data, params = {}) => this.request(Object.assign({ path: `/auth-tokens.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Revokes the token that matches the given token ID issued under the given Dev organization.
         *
         * @tags auth-tokens
         * @name AuthTokensDelete
         * @request POST:/auth-tokens.delete
         * @secure
         */
        this.authTokensDelete = (data, params = {}) => this.request(Object.assign({ path: `/auth-tokens.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Gets the token metadata corresponding to the given token ID under the given Dev organization.
         *
         * @tags auth-tokens
         * @name AuthTokensGet
         * @request GET:/auth-tokens.get
         * @secure
         */
        this.authTokensGet = (query, params = {}) => this.request(Object.assign({ path: `/auth-tokens.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the token metadata corresponding to the given token ID under the given Dev organization.
         *
         * @tags auth-tokens
         * @name AuthTokensGetPost
         * @request POST:/auth-tokens.get
         * @secure
         */
        this.authTokensGetPost = (data, params = {}) => this.request(Object.assign({ path: `/auth-tokens.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns the Dev organization, user and token attributes extracted from the auth token.
         *
         * @tags auth-tokens
         * @name AuthTokensInfo
         * @request GET:/auth-tokens.info
         * @secure
         */
        this.authTokensInfo = (params = {}) => this.request(Object.assign({ path: `/auth-tokens.info`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Returns the Dev organization, user and token attributes extracted from the auth token.
         *
         * @tags auth-tokens
         * @name AuthTokensInfoPost
         * @request POST:/auth-tokens.info
         * @secure
         */
        this.authTokensInfoPost = (data, params = {}) => this.request(Object.assign({ path: `/auth-tokens.info`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the token metadata for all the tokens corresponding to the given token type issued for a given subject.
         *
         * @tags auth-tokens
         * @name AuthTokensList
         * @request GET:/auth-tokens.list
         * @secure
         */
        this.authTokensList = (query, params = {}) => this.request(Object.assign({ path: `/auth-tokens.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the token metadata for all the tokens corresponding to the given token type issued for a given subject.
         *
         * @tags auth-tokens
         * @name AuthTokensListPost
         * @request POST:/auth-tokens.list
         * @secure
         */
        this.authTokensListPost = (data, params = {}) => this.request(Object.assign({ path: `/auth-tokens.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Revokes all the tokens that matches the given token type created by the authenticated user.
         *
         * @tags auth-tokens
         * @name AuthTokensSelfDelete
         * @request POST:/auth-tokens.self.delete
         * @secure
         */
        this.authTokensSelfDelete = (data, params = {}) => this.request(Object.assign({ path: `/auth-tokens.self.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Updates token metadata of a token issued under a given Dev organization.
         *
         * @tags auth-tokens
         * @name AuthTokensUpdate
         * @request POST:/auth-tokens.update
         * @secure
         */
        this.authTokensUpdate = (data, params = {}) => this.request(Object.assign({ path: `/auth-tokens.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a code change object.
         *
         * @tags code-changes
         * @name CodeChangesCreate
         * @request POST:/code-changes.create
         * @secure
         */
        this.codeChangesCreate = (data, params = {}) => this.request(Object.assign({ path: `/code-changes.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a code change object.
         *
         * @tags code-changes
         * @name CodeChangesDelete
         * @request POST:/code-changes.delete
         * @secure
         */
        this.codeChangesDelete = (data, params = {}) => this.request(Object.assign({ path: `/code-changes.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a code change object.
         *
         * @tags code-changes
         * @name CodeChangesGet
         * @request GET:/code-changes.get
         * @secure
         */
        this.codeChangesGet = (query, params = {}) => this.request(Object.assign({ path: `/code-changes.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a code change object.
         *
         * @tags code-changes
         * @name CodeChangesGetPost
         * @request POST:/code-changes.get
         * @secure
         */
        this.codeChangesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/code-changes.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists code change objects.
         *
         * @tags code-changes
         * @name CodeChangesList
         * @request GET:/code-changes.list
         * @secure
         */
        this.codeChangesList = (query, params = {}) => this.request(Object.assign({ path: `/code-changes.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists code change objects.
         *
         * @tags code-changes
         * @name CodeChangesListPost
         * @request POST:/code-changes.list
         * @secure
         */
        this.codeChangesListPost = (data, params = {}) => this.request(Object.assign({ path: `/code-changes.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a code change object.
         *
         * @tags code-changes
         * @name CodeChangesUpdate
         * @request POST:/code-changes.update
         * @secure
         */
        this.codeChangesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/code-changes.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Create the content template.
         *
         * @tags notifications
         * @name ContentTemplateCreate
         * @request POST:/content-template.create
         * @secure
         */
        this.contentTemplateCreate = (data, params = {}) => this.request(Object.assign({ path: `/content-template.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Get the content template.
         *
         * @tags notifications
         * @name ContentTemplateGet
         * @request GET:/content-template.get
         * @secure
         */
        this.contentTemplateGet = (query, params = {}) => this.request(Object.assign({ path: `/content-template.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get the content template.
         *
         * @tags notifications
         * @name ContentTemplateGetPost
         * @request POST:/content-template.get
         * @secure
         */
        this.contentTemplateGetPost = (data, params = {}) => this.request(Object.assign({ path: `/content-template.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the content templates.
         *
         * @tags notifications
         * @name ContentTemplateList
         * @request GET:/content-template.list
         * @secure
         */
        this.contentTemplateList = (query, params = {}) => this.request(Object.assign({ path: `/content-template.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the content templates.
         *
         * @tags notifications
         * @name ContentTemplateListPost
         * @request POST:/content-template.list
         * @secure
         */
        this.contentTemplateListPost = (data, params = {}) => this.request(Object.assign({ path: `/content-template.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a conversation.
         *
         * @tags conversations
         * @name ConversationsCreate
         * @request POST:/conversations.create
         * @secure
         */
        this.conversationsCreate = (data, params = {}) => this.request(Object.assign({ path: `/conversations.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the requested conversation.
         *
         * @tags conversations
         * @name ConversationsDelete
         * @request POST:/conversations.delete
         * @secure
         */
        this.conversationsDelete = (data, params = {}) => this.request(Object.assign({ path: `/conversations.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Exports a collection of conversation items.
         *
         * @tags conversations
         * @name ConversationsExport
         * @request GET:/conversations.export
         * @secure
         */
        this.conversationsExport = (query, params = {}) => this.request(Object.assign({ path: `/conversations.export`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Exports a collection of conversation items.
         *
         * @tags conversations
         * @name ConversationsExportPost
         * @request POST:/conversations.export
         * @secure
         */
        this.conversationsExportPost = (data, params = {}) => this.request(Object.assign({ path: `/conversations.export`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the requested conversation's information.
         *
         * @tags conversations
         * @name ConversationsGet
         * @request GET:/conversations.get
         * @secure
         */
        this.conversationsGet = (query, params = {}) => this.request(Object.assign({ path: `/conversations.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the requested conversation's information.
         *
         * @tags conversations
         * @name ConversationsGetPost
         * @request POST:/conversations.get
         * @secure
         */
        this.conversationsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/conversations.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the available conversations.
         *
         * @tags conversations
         * @name ConversationsList
         * @request GET:/conversations.list
         * @secure
         */
        this.conversationsList = (query, params = {}) => this.request(Object.assign({ path: `/conversations.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the available conversations.
         *
         * @tags conversations
         * @name ConversationsListPost
         * @request POST:/conversations.list
         * @secure
         */
        this.conversationsListPost = (data, params = {}) => this.request(Object.assign({ path: `/conversations.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the requested conversation.
         *
         * @tags conversations
         * @name ConversationsUpdate
         * @request POST:/conversations.update
         * @secure
         */
        this.conversationsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/conversations.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Counts custom objects.
         *
         * @tags customization
         * @name CustomObjectsCount
         * @request GET:/custom-objects.count
         * @secure
         */
        this.customObjectsCount = (query, params = {}) => this.request(Object.assign({ path: `/custom-objects.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Counts custom objects.
         *
         * @tags customization
         * @name CustomObjectsCountPost
         * @request POST:/custom-objects.count
         * @secure
         */
        this.customObjectsCountPost = (data, params = {}) => this.request(Object.assign({ path: `/custom-objects.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a custom object.
         *
         * @tags customization
         * @name CustomObjectsCreate
         * @request POST:/custom-objects.create
         * @secure
         */
        this.customObjectsCreate = (data, params = {}) => this.request(Object.assign({ path: `/custom-objects.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a custom object.
         *
         * @tags customization
         * @name CustomObjectsDelete
         * @request POST:/custom-objects.delete
         * @secure
         */
        this.customObjectsDelete = (data, params = {}) => this.request(Object.assign({ path: `/custom-objects.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a custom object.
         *
         * @tags customization
         * @name CustomObjectsGet
         * @request GET:/custom-objects.get
         * @secure
         */
        this.customObjectsGet = (query, params = {}) => this.request(Object.assign({ path: `/custom-objects.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a custom object.
         *
         * @tags customization
         * @name CustomObjectsGetPost
         * @request POST:/custom-objects.get
         * @secure
         */
        this.customObjectsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/custom-objects.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists custom objects.
         *
         * @tags customization
         * @name CustomObjectsList
         * @request GET:/custom-objects.list
         * @secure
         */
        this.customObjectsList = (query, params = {}) => this.request(Object.assign({ path: `/custom-objects.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists custom objects.
         *
         * @tags customization
         * @name CustomObjectsListPost
         * @request POST:/custom-objects.list
         * @secure
         */
        this.customObjectsListPost = (data, params = {}) => this.request(Object.assign({ path: `/custom-objects.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a custom object.
         *
         * @tags customization
         * @name CustomObjectsUpdate
         * @request POST:/custom-objects.update
         * @secure
         */
        this.customObjectsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/custom-objects.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new enterprise authentication connection for a Dev organization. This authentication connection will not be enabled by default for the organization and the user will need to explicitly enable this. Keep in mind that at a time, only one authentication connection can be enabled for a Dev organization. At present, only 5 enterprise connections can be created by an organization.
         *
         * @tags auth-connection, dev-orgs
         * @name DevOrgAuthConnectionsCreate
         * @request POST:/dev-orgs.auth-connections.create
         * @secure
         */
        this.devOrgAuthConnectionsCreate = (data, params = {}) => this.request(Object.assign({ path: `/dev-orgs.auth-connections.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes an authentication connection. Only enterprise connections which are explicitly set up for a Dev organization can be deleted. Default connections can not be deleted using this method.
         *
         * @tags auth-connection, dev-orgs
         * @name DevOrgAuthConnectionsDelete
         * @request POST:/dev-orgs.auth-connections.delete
         * @secure
         */
        this.devOrgAuthConnectionsDelete = (data, params = {}) => this.request(Object.assign({ path: `/dev-orgs.auth-connections.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Retrieves the details for an authentication connection.
         *
         * @tags auth-connection, dev-orgs
         * @name DevOrgAuthConnectionsGet
         * @request GET:/dev-orgs.auth-connections.get
         * @secure
         */
        this.devOrgAuthConnectionsGet = (query, params = {}) => this.request(Object.assign({ path: `/dev-orgs.auth-connections.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Retrieves the details for an authentication connection.
         *
         * @tags auth-connection, dev-orgs
         * @name DevOrgAuthConnectionsGetPost
         * @request POST:/dev-orgs.auth-connections.get
         * @secure
         */
        this.devOrgAuthConnectionsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/dev-orgs.auth-connections.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists all the authentication connections available for a Dev organization. This list will include both social and enterprise connections which are either available by default or are explicitly created by the user.
         *
         * @tags auth-connection, dev-orgs
         * @name DevOrgAuthConnectionsList
         * @request GET:/dev-orgs.auth-connections.list
         * @secure
         */
        this.devOrgAuthConnectionsList = (params = {}) => this.request(Object.assign({ path: `/dev-orgs.auth-connections.list`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Lists all the authentication connections available for a Dev organization. This list will include both social and enterprise connections which are either available by default or are explicitly created by the user.
         *
         * @tags auth-connection, dev-orgs
         * @name DevOrgAuthConnectionsListPost
         * @request POST:/dev-orgs.auth-connections.list
         * @secure
         */
        this.devOrgAuthConnectionsListPost = (data, params = {}) => this.request(Object.assign({ path: `/dev-orgs.auth-connections.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Enable or disable an authentication connection for a Dev organization. Currently, only 1 authentication connection can be enabled at a time. When a new authentication connection is enabled, the connection which is currently enabled for the Dev organization is automatically disabled.
         *
         * @tags auth-connection, dev-orgs
         * @name DevOrgAuthConnectionsToggle
         * @request POST:/dev-orgs.auth-connections.toggle
         * @secure
         */
        this.devOrgAuthConnectionsToggle = (data, params = {}) => this.request(Object.assign({ path: `/dev-orgs.auth-connections.toggle`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Updates an authentication connection.
         *
         * @tags auth-connection, dev-orgs
         * @name DevOrgAuthConnectionsUpdate
         * @request POST:/dev-orgs.auth-connections.update
         * @secure
         */
        this.devOrgAuthConnectionsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/dev-orgs.auth-connections.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the requested user's information.
         *
         * @tags dev-users
         * @name DevUsersGet
         * @request GET:/dev-users.get
         * @secure
         */
        this.devUsersGet = (query, params = {}) => this.request(Object.assign({ path: `/dev-users.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the requested user's information.
         *
         * @tags dev-users
         * @name DevUsersGetPost
         * @request POST:/dev-users.get
         * @secure
         */
        this.devUsersGetPost = (data, params = {}) => this.request(Object.assign({ path: `/dev-users.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Links an external/secondary identity to the Dev user.
         *
         * @tags dev-users
         * @name DevUsersIdentitiesLink
         * @request POST:/dev-users.identities.link
         * @secure
         */
        this.devUsersIdentitiesLink = (data, params = {}) => this.request(Object.assign({ path: `/dev-users.identities.link`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Unlinks an external/secondary identity from the Dev user.
         *
         * @tags dev-users
         * @name DevUsersIdentitiesUnlink
         * @request POST:/dev-users.identities.unlink
         * @secure
         */
        this.devUsersIdentitiesUnlink = (data, params = {}) => this.request(Object.assign({ path: `/dev-users.identities.unlink`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists users within your organization.
         *
         * @tags dev-users
         * @name DevUsersList
         * @request GET:/dev-users.list
         * @secure
         */
        this.devUsersList = (query, params = {}) => this.request(Object.assign({ path: `/dev-users.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists users within your organization.
         *
         * @tags dev-users
         * @name DevUsersListPost
         * @request POST:/dev-users.list
         * @secure
         */
        this.devUsersListPost = (data, params = {}) => this.request(Object.assign({ path: `/dev-users.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the authenticated user's information.
         *
         * @tags dev-users
         * @name DevUsersSelf
         * @request GET:/dev-users.self
         * @secure
         */
        this.devUsersSelf = (params = {}) => this.request(Object.assign({ path: `/dev-users.self`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Gets the authenticated user's information.
         *
         * @tags dev-users
         * @name DevUsersSelfPost
         * @request POST:/dev-users.self
         * @secure
         */
        this.devUsersSelfPost = (data, params = {}) => this.request(Object.assign({ path: `/dev-users.self`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the authenticated user.
         *
         * @tags dev-users
         * @name DevUsersSelfUpdate
         * @request POST:/dev-users.self.update
         * @secure
         */
        this.devUsersSelfUpdate = (data, params = {}) => this.request(Object.assign({ path: `/dev-users.self.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the user corresponding to the input Id.
         *
         * @tags dev-users
         * @name DevUsersUpdate
         * @request POST:/dev-users.update
         * @secure
         */
        this.devUsersUpdate = (data, params = {}) => this.request(Object.assign({ path: `/dev-users.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Get count of directories matching given filter.
         *
         * @tags directory
         * @name DirectoriesCount
         * @request GET:/directories.count
         * @secure
         */
        this.directoriesCount = (query, params = {}) => this.request(Object.assign({ path: `/directories.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get count of directories matching given filter.
         *
         * @tags directory
         * @name DirectoriesCountPost
         * @request POST:/directories.count
         * @secure
         */
        this.directoriesCountPost = (data, params = {}) => this.request(Object.assign({ path: `/directories.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a directory for the specified inputs.
         *
         * @tags directory
         * @name DirectoriesCreate
         * @request POST:/directories.create
         * @secure
         */
        this.directoriesCreate = (data, params = {}) => this.request(Object.assign({ path: `/directories.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Delete the specified directory.
         *
         * @tags directory
         * @name DirectoriesDelete
         * @request POST:/directories.delete
         * @secure
         */
        this.directoriesDelete = (data, params = {}) => this.request(Object.assign({ path: `/directories.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the specified directory.
         *
         * @tags directory
         * @name DirectoriesGet
         * @request GET:/directories.get
         * @secure
         */
        this.directoriesGet = (query, params = {}) => this.request(Object.assign({ path: `/directories.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the specified directory.
         *
         * @tags directory
         * @name DirectoriesGetPost
         * @request POST:/directories.get
         * @secure
         */
        this.directoriesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/directories.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists directories matching the request.
         *
         * @tags directory
         * @name DirectoriesList
         * @request GET:/directories.list
         * @secure
         */
        this.directoriesList = (query, params = {}) => this.request(Object.assign({ path: `/directories.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists directories matching the request.
         *
         * @tags directory
         * @name DirectoriesListPost
         * @request POST:/directories.list
         * @secure
         */
        this.directoriesListPost = (data, params = {}) => this.request(Object.assign({ path: `/directories.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the specified directory.
         *
         * @tags directory
         * @name DirectoriesUpdate
         * @request POST:/directories.update
         * @secure
         */
        this.directoriesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/directories.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Counts the engagement records.
         *
         * @tags engagements
         * @name EngagementsCount
         * @request GET:/engagements.count
         * @secure
         */
        this.engagementsCount = (query, params = {}) => this.request(Object.assign({ path: `/engagements.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Counts the engagement records.
         *
         * @tags engagements
         * @name EngagementsCountPost
         * @request POST:/engagements.count
         * @secure
         */
        this.engagementsCountPost = (data, params = {}) => this.request(Object.assign({ path: `/engagements.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new engagement record.
         *
         * @tags engagements
         * @name EngagementsCreate
         * @request POST:/engagements.create
         * @secure
         */
        this.engagementsCreate = (data, params = {}) => this.request(Object.assign({ path: `/engagements.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the engagement record.
         *
         * @tags engagements
         * @name EngagementsDelete
         * @request POST:/engagements.delete
         * @secure
         */
        this.engagementsDelete = (data, params = {}) => this.request(Object.assign({ path: `/engagements.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the engagement record.
         *
         * @tags engagements
         * @name EngagementsGet
         * @request GET:/engagements.get
         * @secure
         */
        this.engagementsGet = (query, params = {}) => this.request(Object.assign({ path: `/engagements.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the engagement record.
         *
         * @tags engagements
         * @name EngagementsGetPost
         * @request POST:/engagements.get
         * @secure
         */
        this.engagementsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/engagements.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the engagement records.
         *
         * @tags engagements
         * @name EngagementsList
         * @request GET:/engagements.list
         * @secure
         */
        this.engagementsList = (query, params = {}) => this.request(Object.assign({ path: `/engagements.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the engagement records.
         *
         * @tags engagements
         * @name EngagementsListPost
         * @request POST:/engagements.list
         * @secure
         */
        this.engagementsListPost = (data, params = {}) => this.request(Object.assign({ path: `/engagements.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the engagement record.
         *
         * @tags engagements
         * @name EngagementsUpdate
         * @request POST:/engagements.update
         * @secure
         */
        this.engagementsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/engagements.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets an event source.
         *
         * @tags event-source
         * @name EventSourcesGet
         * @request GET:/event-sources.get
         * @secure
         */
        this.eventSourcesGet = (query, params = {}) => this.request(Object.assign({ path: `/event-sources.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an event source.
         *
         * @tags event-source
         * @name EventSourcesGetPost
         * @request POST:/event-sources.get
         * @secure
         */
        this.eventSourcesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/event-sources.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Schedules an event to be published to the specified event source.
         *
         * @tags event-source
         * @name EventSourcesScheduleEvent
         * @request POST:/event-sources.schedule
         * @secure
         */
        this.eventSourcesScheduleEvent = (data, params = {}) => this.request(Object.assign({ path: `/event-sources.schedule`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes an event scheduled for the specified event source.
         *
         * @tags event-source
         * @name EventSourcesDeleteScheduledEvent
         * @request POST:/event-sources.unschedule
         * @secure
         */
        this.eventSourcesDeleteScheduledEvent = (data, params = {}) => this.request(Object.assign({ path: `/event-sources.unschedule`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Creates a new group. A group is a collection of users.
         *
         * @tags groups
         * @name GroupsCreate
         * @request POST:/groups.create
         * @secure
         */
        this.groupsCreate = (data, params = {}) => this.request(Object.assign({ path: `/groups.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the requested group.
         *
         * @tags groups
         * @name GroupsGet
         * @request GET:/groups.get
         * @secure
         */
        this.groupsGet = (query, params = {}) => this.request(Object.assign({ path: `/groups.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the requested group.
         *
         * @tags groups
         * @name GroupsGetPost
         * @request POST:/groups.get
         * @secure
         */
        this.groupsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/groups.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the available groups.
         *
         * @tags groups
         * @name GroupsList
         * @request GET:/groups.list
         * @secure
         */
        this.groupsList = (query, params = {}) => this.request(Object.assign({ path: `/groups.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the available groups.
         *
         * @tags groups
         * @name GroupsListPost
         * @request POST:/groups.list
         * @secure
         */
        this.groupsListPost = (data, params = {}) => this.request(Object.assign({ path: `/groups.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Adds a member to a group.
         *
         * @tags groups
         * @name GroupMembersAdd
         * @request POST:/groups.members.add
         * @secure
         */
        this.groupMembersAdd = (data, params = {}) => this.request(Object.assign({ path: `/groups.members.add`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the members in a group.
         *
         * @tags groups
         * @name GroupMembersList
         * @request GET:/groups.members.list
         * @secure
         */
        this.groupMembersList = (query, params = {}) => this.request(Object.assign({ path: `/groups.members.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the members in a group.
         *
         * @tags groups
         * @name GroupMembersListPost
         * @request POST:/groups.members.list
         * @secure
         */
        this.groupMembersListPost = (data, params = {}) => this.request(Object.assign({ path: `/groups.members.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Removes a member from a group.
         *
         * @tags groups
         * @name GroupMembersRemove
         * @request POST:/groups.members.remove
         * @secure
         */
        this.groupMembersRemove = (data, params = {}) => this.request(Object.assign({ path: `/groups.members.remove`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the requested group.
         *
         * @tags groups
         * @name GroupsUpdate
         * @request POST:/groups.update
         * @secure
         */
        this.groupsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/groups.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates an incident.
         *
         * @tags operate
         * @name IncidentsCreate
         * @request POST:/incidents.create
         * @secure
         */
        this.incidentsCreate = (data, params = {}) => this.request(Object.assign({ path: `/incidents.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes an incident.
         *
         * @tags operate
         * @name IncidentsDelete
         * @request POST:/incidents.delete
         * @secure
         */
        this.incidentsDelete = (data, params = {}) => this.request(Object.assign({ path: `/incidents.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets an incident.
         *
         * @tags operate
         * @name IncidentsGet
         * @request GET:/incidents.get
         * @secure
         */
        this.incidentsGet = (query, params = {}) => this.request(Object.assign({ path: `/incidents.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an incident.
         *
         * @tags operate
         * @name IncidentsGetPost
         * @request POST:/incidents.get
         * @secure
         */
        this.incidentsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/incidents.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists collections of incidents by groups.
         *
         * @tags operate
         * @name IncidentsGroup
         * @request GET:/incidents.group
         * @secure
         */
        this.incidentsGroup = (query, params = {}) => this.request(Object.assign({ path: `/incidents.group`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists collections of incidents by groups.
         *
         * @tags operate
         * @name IncidentsGroupPost
         * @request POST:/incidents.group
         * @secure
         */
        this.incidentsGroupPost = (data, params = {}) => this.request(Object.assign({ path: `/incidents.group`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists incidents.
         *
         * @tags operate
         * @name IncidentsList
         * @request GET:/incidents.list
         * @secure
         */
        this.incidentsList = (query, params = {}) => this.request(Object.assign({ path: `/incidents.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists incidents.
         *
         * @tags operate
         * @name IncidentsListPost
         * @request POST:/incidents.list
         * @secure
         */
        this.incidentsListPost = (data, params = {}) => this.request(Object.assign({ path: `/incidents.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an incident.
         *
         * @tags operate
         * @name IncidentsUpdate
         * @request POST:/incidents.update
         * @secure
         */
        this.incidentsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/incidents.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description OAuth2 authorization callback.
         *
         * @tags keyring
         * @name KeyringsCreateCallback
         * @request GET:/keyrings.authorize
         */
        this.keyringsCreateCallback = (query, params = {}) => this.request(Object.assign({ path: `/keyrings.authorize`, method: 'GET', query: query }, params));
        /**
         * @description OAuth2 authorization callback.
         *
         * @tags keyring
         * @name KeyringsCreateCallbackPost
         * @request POST:/keyrings.authorize
         * @secure
         */
        this.keyringsCreateCallbackPost = (data, params = {}) => this.request(Object.assign({ path: `/keyrings.authorize`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Creates a custom link type.
         *
         * @tags customization
         * @name CustomLinkTypeCreate
         * @request POST:/link-types.custom.create
         * @secure
         */
        this.customLinkTypeCreate = (data, params = {}) => this.request(Object.assign({ path: `/link-types.custom.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a custom link type.
         *
         * @tags customization
         * @name CustomLinkTypeGet
         * @request GET:/link-types.custom.get
         * @secure
         */
        this.customLinkTypeGet = (query, params = {}) => this.request(Object.assign({ path: `/link-types.custom.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a custom link type.
         *
         * @tags customization
         * @name CustomLinkTypeGetPost
         * @request POST:/link-types.custom.get
         * @secure
         */
        this.customLinkTypeGetPost = (data, params = {}) => this.request(Object.assign({ path: `/link-types.custom.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists custom link types.
         *
         * @tags customization
         * @name CustomLinkTypeList
         * @request GET:/link-types.custom.list
         * @secure
         */
        this.customLinkTypeList = (query, params = {}) => this.request(Object.assign({ path: `/link-types.custom.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists custom link types.
         *
         * @tags customization
         * @name CustomLinkTypeListPost
         * @request POST:/link-types.custom.list
         * @secure
         */
        this.customLinkTypeListPost = (data, params = {}) => this.request(Object.assign({ path: `/link-types.custom.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a custom link type.
         *
         * @tags customization
         * @name CustomLinkTypeUpdate
         * @request POST:/link-types.custom.update
         * @secure
         */
        this.customLinkTypeUpdate = (data, params = {}) => this.request(Object.assign({ path: `/link-types.custom.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a link between two objects to indicate a relationship.
         *
         * @tags links
         * @name LinksCreate
         * @request POST:/links.create
         * @secure
         */
        this.linksCreate = (data, params = {}) => this.request(Object.assign({ path: `/links.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a link.
         *
         * @tags links
         * @name LinksDelete
         * @request POST:/links.delete
         * @secure
         */
        this.linksDelete = (data, params = {}) => this.request(Object.assign({ path: `/links.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the requested link's information.
         *
         * @tags links
         * @name LinksGet
         * @request GET:/links.get
         * @secure
         */
        this.linksGet = (query, params = {}) => this.request(Object.assign({ path: `/links.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the requested link's information.
         *
         * @tags links
         * @name LinksGetPost
         * @request POST:/links.get
         * @secure
         */
        this.linksGetPost = (data, params = {}) => this.request(Object.assign({ path: `/links.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the available links.
         *
         * @tags links
         * @name LinksList
         * @request GET:/links.list
         * @secure
         */
        this.linksList = (query, params = {}) => this.request(Object.assign({ path: `/links.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the available links.
         *
         * @tags links
         * @name LinksListPost
         * @request POST:/links.list
         * @secure
         */
        this.linksListPost = (data, params = {}) => this.request(Object.assign({ path: `/links.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Executes the metric action on the given object.
         *
         * @tags slas
         * @name MetricActionExecute
         * @request POST:/metric-action.execute
         * @secure
         */
        this.metricActionExecute = (data, params = {}) => this.request(Object.assign({ path: `/metric-action.execute`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a custom metric definition
         *
         * @tags slas
         * @name MetricDefinitionsCreate
         * @request POST:/metric-definitions.create
         * @secure
         */
        this.metricDefinitionsCreate = (data, params = {}) => this.request(Object.assign({ path: `/metric-definitions.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a custom metric definition
         *
         * @tags slas
         * @name MetricDefinitionsDelete
         * @request POST:/metric-definitions.delete
         * @secure
         */
        this.metricDefinitionsDelete = (data, params = {}) => this.request(Object.assign({ path: `/metric-definitions.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a custom metric definition
         *
         * @tags slas
         * @name MetricDefinitionsGet
         * @request GET:/metric-definitions.get
         * @secure
         */
        this.metricDefinitionsGet = (query, params = {}) => this.request(Object.assign({ path: `/metric-definitions.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a custom metric definition
         *
         * @tags slas
         * @name MetricDefinitionsGetPost
         * @request POST:/metric-definitions.get
         * @secure
         */
        this.metricDefinitionsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/metric-definitions.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists metric definitions matching a filter.
         *
         * @tags slas
         * @name MetricDefinitionsList
         * @request GET:/metric-definitions.list
         * @secure
         */
        this.metricDefinitionsList = (query, params = {}) => this.request(Object.assign({ path: `/metric-definitions.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists metric definitions matching a filter.
         *
         * @tags slas
         * @name MetricDefinitionsListPost
         * @request POST:/metric-definitions.list
         * @secure
         */
        this.metricDefinitionsListPost = (data, params = {}) => this.request(Object.assign({ path: `/metric-definitions.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a custom metric definition
         *
         * @tags slas
         * @name MetricDefinitionsUpdate
         * @request POST:/metric-definitions.update
         * @secure
         */
        this.metricDefinitionsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/metric-definitions.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Ingest endpoint for DevRev metrics data from clients.
         *
         * @tags product-usage
         * @name MetricsDevrevIngest
         * @request POST:/metrics.devrev.ingest
         * @secure
         */
        this.metricsDevrevIngest = (data, params = {}) => this.request(Object.assign({ path: `/metrics.devrev.ingest`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Generate a notification.
         *
         * @tags notifications
         * @name NotificationsSend
         * @request POST:/notifications.send
         * @secure
         */
        this.notificationsSend = (data, params = {}) => this.request(Object.assign({ path: `/notifications.send`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates an organization schedule fragment.
         *
         * @tags schedules
         * @name OrgScheduleFragmentsCreate
         * @request POST:/org-schedule-fragments.create
         * @secure
         */
        this.orgScheduleFragmentsCreate = (data, params = {}) => this.request(Object.assign({ path: `/org-schedule-fragments.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets an organization schedule fragment.
         *
         * @tags schedules
         * @name OrgScheduleFragmentsGet
         * @request GET:/org-schedule-fragments.get
         * @secure
         */
        this.orgScheduleFragmentsGet = (query, params = {}) => this.request(Object.assign({ path: `/org-schedule-fragments.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an organization schedule fragment.
         *
         * @tags schedules
         * @name OrgScheduleFragmentsGetPost
         * @request POST:/org-schedule-fragments.get
         * @secure
         */
        this.orgScheduleFragmentsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/org-schedule-fragments.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Changes stage of an organization schedule fragment.
         *
         * @tags schedules
         * @name OrgScheduleFragmentsTransition
         * @request POST:/org-schedule-fragments.transition
         * @secure
         */
        this.orgScheduleFragmentsTransition = (data, params = {}) => this.request(Object.assign({ path: `/org-schedule-fragments.transition`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates an organization schedule with a default weekly organization schedule and a list of organization schedule fragments.
         *
         * @tags schedules
         * @name OrgSchedulesCreate
         * @request POST:/org-schedules.create
         * @secure
         */
        this.orgSchedulesCreate = (data, params = {}) => this.request(Object.assign({ path: `/org-schedules.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets an organization schedule.
         *
         * @tags schedules
         * @name OrgSchedulesGet
         * @request GET:/org-schedules.get
         * @secure
         */
        this.orgSchedulesGet = (query, params = {}) => this.request(Object.assign({ path: `/org-schedules.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an organization schedule.
         *
         * @tags schedules
         * @name OrgSchedulesGetPost
         * @request POST:/org-schedules.get
         * @secure
         */
        this.orgSchedulesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/org-schedules.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets list of organization schedules.
         *
         * @tags schedules
         * @name OrgSchedulesList
         * @request GET:/org-schedules.list
         * @secure
         */
        this.orgSchedulesList = (query, params = {}) => this.request(Object.assign({ path: `/org-schedules.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets list of organization schedules.
         *
         * @tags schedules
         * @name OrgSchedulesListPost
         * @request POST:/org-schedules.list
         * @secure
         */
        this.orgSchedulesListPost = (data, params = {}) => this.request(Object.assign({ path: `/org-schedules.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Sets next organization schedule fragment which must begin the day the last existing fragment ends.
         *
         * @tags schedules
         * @name OrgSchedulesSetFuture
         * @request POST:/org-schedules.set-future
         * @secure
         */
        this.orgSchedulesSetFuture = (data, params = {}) => this.request(Object.assign({ path: `/org-schedules.set-future`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Publishes or archives an organization schedule.
         *
         * @tags schedules
         * @name OrgSchedulesTransition
         * @request POST:/org-schedules.transition
         * @secure
         */
        this.orgSchedulesTransition = (data, params = {}) => this.request(Object.assign({ path: `/org-schedules.transition`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an organization schedule.
         *
         * @tags schedules
         * @name OrgSchedulesUpdate
         * @request POST:/org-schedules.update
         * @secure
         */
        this.orgSchedulesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/org-schedules.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates new [part](https://devrev.ai/docs/product/parts).
         *
         * @tags parts
         * @name PartsCreate
         * @request POST:/parts.create
         * @secure
         */
        this.partsCreate = (data, params = {}) => this.request(Object.assign({ path: `/parts.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a [part](https://devrev.ai/docs/product/parts).
         *
         * @tags parts
         * @name PartsDelete
         * @request POST:/parts.delete
         * @secure
         */
        this.partsDelete = (data, params = {}) => this.request(Object.assign({ path: `/parts.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a [part's](https://devrev.ai/docs/product/parts) information.
         *
         * @tags parts
         * @name PartsGet
         * @request GET:/parts.get
         * @secure
         */
        this.partsGet = (query, params = {}) => this.request(Object.assign({ path: `/parts.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a [part's](https://devrev.ai/docs/product/parts) information.
         *
         * @tags parts
         * @name PartsGetPost
         * @request POST:/parts.get
         * @secure
         */
        this.partsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/parts.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists a collection of [parts](https://devrev.ai/docs/product/parts).
         *
         * @tags parts
         * @name PartsList
         * @request GET:/parts.list
         * @secure
         */
        this.partsList = (query, params = {}) => this.request(Object.assign({ path: `/parts.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists a collection of [parts](https://devrev.ai/docs/product/parts).
         *
         * @tags parts
         * @name PartsListPost
         * @request POST:/parts.list
         * @secure
         */
        this.partsListPost = (data, params = {}) => this.request(Object.assign({ path: `/parts.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a [part's](https://devrev.ai/docs/product/parts) information.
         *
         * @tags parts
         * @name PartsUpdate
         * @request POST:/parts.update
         * @secure
         */
        this.partsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/parts.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Get the preferences object.
         *
         * @tags preferences
         * @name PreferencesGet
         * @request GET:/preferences.get
         * @secure
         */
        this.preferencesGet = (query, params = {}) => this.request(Object.assign({ path: `/preferences.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get the preferences object.
         *
         * @tags preferences
         * @name PreferencesGetPost
         * @request POST:/preferences.get
         * @secure
         */
        this.preferencesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/preferences.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a question-answer.
         *
         * @tags question-answers
         * @name CreateQuestionAnswer
         * @request POST:/question-answers.create
         * @secure
         */
        this.createQuestionAnswer = (data, params = {}) => this.request(Object.assign({ path: `/question-answers.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a question-answer.
         *
         * @tags question-answers
         * @name DeleteQuestionAnswer
         * @request POST:/question-answers.delete
         * @secure
         */
        this.deleteQuestionAnswer = (data, params = {}) => this.request(Object.assign({ path: `/question-answers.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Gets a question-answer.
         *
         * @tags question-answers
         * @name GetQuestionAnswer
         * @request GET:/question-answers.get
         * @secure
         */
        this.getQuestionAnswer = (query, params = {}) => this.request(Object.assign({ path: `/question-answers.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a question-answer.
         *
         * @tags question-answers
         * @name GetQuestionAnswerPost
         * @request POST:/question-answers.get
         * @secure
         */
        this.getQuestionAnswerPost = (data, params = {}) => this.request(Object.assign({ path: `/question-answers.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists a collection of question-answers.
         *
         * @tags question-answers
         * @name ListQuestionAnswers
         * @request GET:/question-answers.list
         * @secure
         */
        this.listQuestionAnswers = (query, params = {}) => this.request(Object.assign({ path: `/question-answers.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists a collection of question-answers.
         *
         * @tags question-answers
         * @name ListQuestionAnswersPost
         * @request POST:/question-answers.list
         * @secure
         */
        this.listQuestionAnswersPost = (data, params = {}) => this.request(Object.assign({ path: `/question-answers.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a question-answer.
         *
         * @tags question-answers
         * @name UpdateQuestionAnswer
         * @request POST:/question-answers.update
         * @secure
         */
        this.updateQuestionAnswer = (data, params = {}) => this.request(Object.assign({ path: `/question-answers.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a Rev organization in the authenticated user's Dev organization.
         *
         * @tags rev-orgs
         * @name RevOrgsCreate
         * @request POST:/rev-orgs.create
         * @secure
         */
        this.revOrgsCreate = (data, params = {}) => this.request(Object.assign({ path: `/rev-orgs.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the Rev organization.
         *
         * @tags rev-orgs
         * @name RevOrgsDelete
         * @request POST:/rev-orgs.delete
         * @secure
         */
        this.revOrgsDelete = (data, params = {}) => this.request(Object.assign({ path: `/rev-orgs.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Retrieves the Rev organization's information.
         *
         * @tags rev-orgs
         * @name RevOrgsGet
         * @request GET:/rev-orgs.get
         * @secure
         */
        this.revOrgsGet = (query, params = {}) => this.request(Object.assign({ path: `/rev-orgs.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Retrieves the Rev organization's information.
         *
         * @tags rev-orgs
         * @name RevOrgsGetPost
         * @request POST:/rev-orgs.get
         * @secure
         */
        this.revOrgsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/rev-orgs.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the list of Rev organizations' information belonging to the authenticated user's Dev Organization which the user is also authorized to access.
         *
         * @tags rev-orgs
         * @name RevOrgsList
         * @request GET:/rev-orgs.list
         * @secure
         */
        this.revOrgsList = (query, params = {}) => this.request(Object.assign({ path: `/rev-orgs.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the list of Rev organizations' information belonging to the authenticated user's Dev Organization which the user is also authorized to access.
         *
         * @tags rev-orgs
         * @name RevOrgsListPost
         * @request POST:/rev-orgs.list
         * @secure
         */
        this.revOrgsListPost = (data, params = {}) => this.request(Object.assign({ path: `/rev-orgs.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the Rev organization's information.
         *
         * @tags rev-orgs
         * @name RevOrgsUpdate
         * @request POST:/rev-orgs.update
         * @secure
         */
        this.revOrgsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/rev-orgs.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a Rev user for a Rev organization. Rev user can be a customer or a lead of an organization.
         *
         * @tags rev-users
         * @name RevUsersCreate
         * @request POST:/rev-users.create
         * @secure
         */
        this.revUsersCreate = (data, params = {}) => this.request(Object.assign({ path: `/rev-users.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a Rev user.
         *
         * @tags rev-users
         * @name RevUsersDelete
         * @request POST:/rev-users.delete
         * @secure
         */
        this.revUsersDelete = (data, params = {}) => this.request(Object.assign({ path: `/rev-users.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes data of a contact.
         *
         * @tags compliance
         * @name DeleteRevUsersPersonalData
         * @request POST:/rev-users.delete-personal-data
         * @secure
         */
        this.deleteRevUsersPersonalData = (data, params = {}) => this.request(Object.assign({ path: `/rev-users.delete-personal-data`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns the Rev user of a Rev organization by its ID.
         *
         * @tags rev-users
         * @name RevUsersGet
         * @request GET:/rev-users.get
         * @secure
         */
        this.revUsersGet = (query, params = {}) => this.request(Object.assign({ path: `/rev-users.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the Rev user of a Rev organization by its ID.
         *
         * @tags rev-users
         * @name RevUsersGetPost
         * @request POST:/rev-users.get
         * @secure
         */
        this.revUsersGetPost = (data, params = {}) => this.request(Object.assign({ path: `/rev-users.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Links a rev user to a rev org.
         *
         * @tags rev-users
         * @name LinkRevUserToRevOrg
         * @request POST:/rev-users.link
         * @secure
         */
        this.linkRevUserToRevOrg = (data, params = {}) => this.request(Object.assign({ path: `/rev-users.link`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns a list of all Rev Users belonging to the authenticated user's Dev Organization.
         *
         * @tags rev-users
         * @name RevUsersList
         * @request GET:/rev-users.list
         * @secure
         */
        this.revUsersList = (query, params = {}) => this.request(Object.assign({ path: `/rev-users.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns a list of all Rev Users belonging to the authenticated user's Dev Organization.
         *
         * @tags rev-users
         * @name RevUsersListPost
         * @request POST:/rev-users.list
         * @secure
         */
        this.revUsersListPost = (data, params = {}) => this.request(Object.assign({ path: `/rev-users.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Merges the secondary Rev user into the primary Rev user.
         *
         * @tags rev-users
         * @name RevUsersMerge
         * @request POST:/rev-users.merge
         * @secure
         */
        this.revUsersMerge = (data, params = {}) => this.request(Object.assign({ path: `/rev-users.merge`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Retrieves data of a contact.
         *
         * @tags compliance
         * @name GetRevUsersPersonalData
         * @request POST:/rev-users.personal-data
         * @secure
         */
        this.getRevUsersPersonalData = (data, params = {}) => this.request(Object.assign({ path: `/rev-users.personal-data`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Scans through all Rev users.
         *
         * @tags rev-users
         * @name RevUsersScan
         * @request GET:/rev-users.scan
         * @secure
         */
        this.revUsersScan = (query, params = {}) => this.request(Object.assign({ path: `/rev-users.scan`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Scans through all Rev users.
         *
         * @tags rev-users
         * @name RevUsersScanPost
         * @request POST:/rev-users.scan
         * @secure
         */
        this.revUsersScanPost = (data, params = {}) => this.request(Object.assign({ path: `/rev-users.scan`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Unlinks a rev user from a rev org.
         *
         * @tags rev-users
         * @name UnlinkRevUserFromRevOrg
         * @request POST:/rev-users.unlink
         * @secure
         */
        this.unlinkRevUserFromRevOrg = (data, params = {}) => this.request(Object.assign({ path: `/rev-users.unlink`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a Rev user.
         *
         * @tags rev-users
         * @name RevUsersUpdate
         * @request POST:/rev-users.update
         * @secure
         */
        this.revUsersUpdate = (data, params = {}) => this.request(Object.assign({ path: `/rev-users.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the aggregated schema.
         *
         * @tags customization
         * @name AggregatedSchemaGet
         * @request GET:/schemas.aggregated.get
         * @secure
         */
        this.aggregatedSchemaGet = (query, params = {}) => this.request(Object.assign({ path: `/schemas.aggregated.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the aggregated schema.
         *
         * @tags customization
         * @name AggregatedSchemaGetPost
         * @request POST:/schemas.aggregated.get
         * @secure
         */
        this.aggregatedSchemaGetPost = (data, params = {}) => this.request(Object.assign({ path: `/schemas.aggregated.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a custom schema fragment.
         *
         * @tags customization
         * @name CustomSchemaFragmentsGet
         * @request GET:/schemas.custom.get
         * @secure
         */
        this.customSchemaFragmentsGet = (query, params = {}) => this.request(Object.assign({ path: `/schemas.custom.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a custom schema fragment.
         *
         * @tags customization
         * @name CustomSchemaFragmentsGetPost
         * @request POST:/schemas.custom.get
         * @secure
         */
        this.customSchemaFragmentsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/schemas.custom.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists custom schema fragments.
         *
         * @tags customization
         * @name CustomSchemaFragmentsList
         * @request GET:/schemas.custom.list
         * @secure
         */
        this.customSchemaFragmentsList = (query, params = {}) => this.request(Object.assign({ path: `/schemas.custom.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists custom schema fragments.
         *
         * @tags customization
         * @name CustomSchemaFragmentsListPost
         * @request POST:/schemas.custom.list
         * @secure
         */
        this.customSchemaFragmentsListPost = (data, params = {}) => this.request(Object.assign({ path: `/schemas.custom.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates or updates a custom schema fragment.
         *
         * @tags customization
         * @name CustomSchemaFragmentsSet
         * @request POST:/schemas.custom.set
         * @secure
         */
        this.customSchemaFragmentsSet = (data, params = {}) => this.request(Object.assign({ path: `/schemas.custom.set`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a stock schema fragment.
         *
         * @tags customization
         * @name StockSchemaFragmentsGet
         * @request GET:/schemas.stock.get
         * @secure
         */
        this.stockSchemaFragmentsGet = (query, params = {}) => this.request(Object.assign({ path: `/schemas.stock.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a stock schema fragment.
         *
         * @tags customization
         * @name StockSchemaFragmentsGetPost
         * @request POST:/schemas.stock.get
         * @secure
         */
        this.stockSchemaFragmentsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/schemas.stock.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists stock schema fragments.
         *
         * @tags customization
         * @name StockSchemaFragmentsList
         * @request GET:/schemas.stock.list
         * @secure
         */
        this.stockSchemaFragmentsList = (query, params = {}) => this.request(Object.assign({ path: `/schemas.stock.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists stock schema fragments.
         *
         * @tags customization
         * @name StockSchemaFragmentsListPost
         * @request POST:/schemas.stock.list
         * @secure
         */
        this.stockSchemaFragmentsListPost = (data, params = {}) => this.request(Object.assign({ path: `/schemas.stock.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists subtypes.
         *
         * @tags customization
         * @name SubtypesList
         * @request GET:/schemas.subtypes.list
         * @secure
         */
        this.subtypesList = (query, params = {}) => this.request(Object.assign({ path: `/schemas.subtypes.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists subtypes.
         *
         * @tags customization
         * @name SubtypesListPost
         * @request POST:/schemas.subtypes.list
         * @secure
         */
        this.subtypesListPost = (data, params = {}) => this.request(Object.assign({ path: `/schemas.subtypes.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Searches for records based on a given query.
         *
         * @tags search
         * @name SearchCore
         * @request GET:/search.core
         * @secure
         */
        this.searchCore = (query, params = {}) => this.request(Object.assign({ path: `/search.core`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Searches for records based on a given query.
         *
         * @tags search
         * @name SearchCorePost
         * @request POST:/search.core
         * @secure
         */
        this.searchCorePost = (data, params = {}) => this.request(Object.assign({ path: `/search.core`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Performs search, using a combination of syntactic and semantic search.
         *
         * @tags search
         * @name SearchHybrid
         * @request GET:/search.hybrid
         * @secure
         */
        this.searchHybrid = (query, params = {}) => this.request(Object.assign({ path: `/search.hybrid`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Performs search, using a combination of syntactic and semantic search.
         *
         * @tags search
         * @name SearchHybridPost
         * @request POST:/search.hybrid
         * @secure
         */
        this.searchHybridPost = (data, params = {}) => this.request(Object.assign({ path: `/search.hybrid`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a service account.
         *
         * @tags service-accounts
         * @name ServiceAccountsGet
         * @request GET:/service-accounts.get
         * @secure
         */
        this.serviceAccountsGet = (query, params = {}) => this.request(Object.assign({ path: `/service-accounts.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a service account.
         *
         * @tags service-accounts
         * @name ServiceAccountsGetPost
         * @request POST:/service-accounts.get
         * @secure
         */
        this.serviceAccountsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/service-accounts.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets an SLA tracker.
         *
         * @tags slas
         * @name SlaTrackersGet
         * @request GET:/sla-trackers.get
         * @secure
         */
        this.slaTrackersGet = (query, params = {}) => this.request(Object.assign({ path: `/sla-trackers.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an SLA tracker.
         *
         * @tags slas
         * @name SlaTrackersGetPost
         * @request POST:/sla-trackers.get
         * @secure
         */
        this.slaTrackersGetPost = (data, params = {}) => this.request(Object.assign({ path: `/sla-trackers.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists SLA trackers matching a filter.
         *
         * @tags slas
         * @name SlaTrackersList
         * @request GET:/sla-trackers.list
         * @secure
         */
        this.slaTrackersList = (query, params = {}) => this.request(Object.assign({ path: `/sla-trackers.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists SLA trackers matching a filter.
         *
         * @tags slas
         * @name SlaTrackersListPost
         * @request POST:/sla-trackers.list
         * @secure
         */
        this.slaTrackersListPost = (data, params = {}) => this.request(Object.assign({ path: `/sla-trackers.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description  Assigns the SLA to a set of Rev organizations.
         *
         * @tags slas
         * @name SlasAssign
         * @request POST:/slas.assign
         * @secure
         */
        this.slasAssign = (data, params = {}) => this.request(Object.assign({ path: `/slas.assign`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates an SLA in draft status.
         *
         * @tags slas
         * @name SlasCreate
         * @request POST:/slas.create
         * @secure
         */
        this.slasCreate = (data, params = {}) => this.request(Object.assign({ path: `/slas.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets an SLA.
         *
         * @tags slas
         * @name SlasGet
         * @request GET:/slas.get
         * @secure
         */
        this.slasGet = (query, params = {}) => this.request(Object.assign({ path: `/slas.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an SLA.
         *
         * @tags slas
         * @name SlasGetPost
         * @request POST:/slas.get
         * @secure
         */
        this.slasGetPost = (data, params = {}) => this.request(Object.assign({ path: `/slas.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists SLAs matching a filter.
         *
         * @tags slas
         * @name SlasList
         * @request GET:/slas.list
         * @secure
         */
        this.slasList = (query, params = {}) => this.request(Object.assign({ path: `/slas.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists SLAs matching a filter.
         *
         * @tags slas
         * @name SlasListPost
         * @request POST:/slas.list
         * @secure
         */
        this.slasListPost = (data, params = {}) => this.request(Object.assign({ path: `/slas.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Changes the status of an SLA.
         *
         * @tags slas
         * @name SlasTransition
         * @request POST:/slas.transition
         * @secure
         */
        this.slasTransition = (data, params = {}) => this.request(Object.assign({ path: `/slas.transition`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a draft SLA.
         *
         * @tags slas
         * @name SlasUpdate
         * @request POST:/slas.update
         * @secure
         */
        this.slasUpdate = (data, params = {}) => this.request(Object.assign({ path: `/slas.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets snap-in resources for a user in a snap-in.
         *
         * @tags snap-ins
         * @name SnapInsResources
         * @request GET:/snap-ins.resources
         * @secure
         */
        this.snapInsResources = (query, params = {}) => this.request(Object.assign({ path: `/snap-ins.resources`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets snap-in resources for a user in a snap-in.
         *
         * @tags snap-ins
         * @name SnapInsResourcesPost
         * @request POST:/snap-ins.resources
         * @secure
         */
        this.snapInsResourcesPost = (data, params = {}) => this.request(Object.assign({ path: `/snap-ins.resources`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a snap-in.
         *
         * @tags snap-ins
         * @name SnapInsUpdate
         * @request POST:/snap-ins.update
         * @secure
         */
        this.snapInsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/snap-ins.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Create a snap widget object.
         *
         * @tags snap-widgets
         * @name SnapWidgetsCreate
         * @request POST:/snap-widgets.create
         * @secure
         */
        this.snapWidgetsCreate = (data, params = {}) => this.request(Object.assign({ path: `/snap-widgets.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a custom stage.
         *
         * @tags customization
         * @name CustomStagesCreate
         * @request POST:/stages.custom.create
         * @secure
         */
        this.customStagesCreate = (data, params = {}) => this.request(Object.assign({ path: `/stages.custom.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a custom stage.
         *
         * @tags customization
         * @name CustomStagesGet
         * @request GET:/stages.custom.get
         * @secure
         */
        this.customStagesGet = (query, params = {}) => this.request(Object.assign({ path: `/stages.custom.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a custom stage.
         *
         * @tags customization
         * @name CustomStagesGetPost
         * @request POST:/stages.custom.get
         * @secure
         */
        this.customStagesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/stages.custom.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists custom stages.
         *
         * @tags customization
         * @name CustomStagesList
         * @request GET:/stages.custom.list
         * @secure
         */
        this.customStagesList = (query, params = {}) => this.request(Object.assign({ path: `/stages.custom.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists custom stages.
         *
         * @tags customization
         * @name CustomStagesListPost
         * @request POST:/stages.custom.list
         * @secure
         */
        this.customStagesListPost = (data, params = {}) => this.request(Object.assign({ path: `/stages.custom.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a custom stage.
         *
         * @tags customization
         * @name CustomStagesUpdate
         * @request POST:/stages.custom.update
         * @secure
         */
        this.customStagesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/stages.custom.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a custom state.
         *
         * @tags customization
         * @name CustomStatesCreate
         * @request POST:/states.custom.create
         * @secure
         */
        this.customStatesCreate = (data, params = {}) => this.request(Object.assign({ path: `/states.custom.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a custom state.
         *
         * @tags customization
         * @name CustomStatesGet
         * @request GET:/states.custom.get
         * @secure
         */
        this.customStatesGet = (query, params = {}) => this.request(Object.assign({ path: `/states.custom.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a custom state.
         *
         * @tags customization
         * @name CustomStatesGetPost
         * @request POST:/states.custom.get
         * @secure
         */
        this.customStatesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/states.custom.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists custom states.
         *
         * @tags customization
         * @name CustomStatesList
         * @request GET:/states.custom.list
         * @secure
         */
        this.customStatesList = (query, params = {}) => this.request(Object.assign({ path: `/states.custom.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists custom states.
         *
         * @tags customization
         * @name CustomStatesListPost
         * @request POST:/states.custom.list
         * @secure
         */
        this.customStatesListPost = (data, params = {}) => this.request(Object.assign({ path: `/states.custom.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a custom state.
         *
         * @tags customization
         * @name CustomStatesUpdate
         * @request POST:/states.custom.update
         * @secure
         */
        this.customStatesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/states.custom.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a schema for survey, which includes name and description of schema.
         *
         * @tags surveys
         * @name SurveysCreate
         * @request POST:/surveys.create
         * @secure
         */
        this.surveysCreate = (data, params = {}) => this.request(Object.assign({ path: `/surveys.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the specified survey.
         *
         * @tags surveys
         * @name SurveysDelete
         * @request POST:/surveys.delete
         * @secure
         */
        this.surveysDelete = (data, params = {}) => this.request(Object.assign({ path: `/surveys.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description List surveys requested by the user.
         *
         * @tags surveys
         * @name SurveysList
         * @request GET:/surveys.list
         * @secure
         */
        this.surveysList = (query, params = {}) => this.request(Object.assign({ path: `/surveys.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List surveys requested by the user.
         *
         * @tags surveys
         * @name SurveysListPost
         * @request POST:/surveys.list
         * @secure
         */
        this.surveysListPost = (data, params = {}) => this.request(Object.assign({ path: `/surveys.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description List survey responses requested by the user.
         *
         * @tags surveys
         * @name SurveysResponsesList
         * @request GET:/surveys.responses.list
         * @secure
         */
        this.surveysResponsesList = (query, params = {}) => this.request(Object.assign({ path: `/surveys.responses.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List survey responses requested by the user.
         *
         * @tags surveys
         * @name SurveysResponsesListPost
         * @request POST:/surveys.responses.list
         * @secure
         */
        this.surveysResponsesListPost = (data, params = {}) => this.request(Object.assign({ path: `/surveys.responses.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Sends a survey on the specified channels.
         *
         * @tags surveys
         * @name SurveysSend
         * @request POST:/surveys.send
         * @secure
         */
        this.surveysSend = (data, params = {}) => this.request(Object.assign({ path: `/surveys.send`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Submits a user response to a survey, which is defined by the survey ID.
         *
         * @tags surveys
         * @name SurveysSubmit
         * @request POST:/surveys.submit
         * @secure
         */
        this.surveysSubmit = (data, params = {}) => this.request(Object.assign({ path: `/surveys.submit`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists system users within your organization.
         *
         * @tags sys-users
         * @name SysUsersList
         * @request GET:/sys-users.list
         * @secure
         */
        this.sysUsersList = (query, params = {}) => this.request(Object.assign({ path: `/sys-users.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists system users within your organization.
         *
         * @tags sys-users
         * @name SysUsersListPost
         * @request POST:/sys-users.list
         * @secure
         */
        this.sysUsersListPost = (data, params = {}) => this.request(Object.assign({ path: `/sys-users.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the system user.
         *
         * @tags sys-users
         * @name SysUsersUpdate
         * @request POST:/sys-users.update
         * @secure
         */
        this.sysUsersUpdate = (data, params = {}) => this.request(Object.assign({ path: `/sys-users.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new tag, which is used to create associations between objects and a logical concept denoted by the tag's name.
         *
         * @tags tags
         * @name TagsCreate
         * @request POST:/tags.create
         * @secure
         */
        this.tagsCreate = (data, params = {}) => this.request(Object.assign({ path: `/tags.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a tag.
         *
         * @tags tags
         * @name TagsDelete
         * @request POST:/tags.delete
         * @secure
         */
        this.tagsDelete = (data, params = {}) => this.request(Object.assign({ path: `/tags.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a tag's information.
         *
         * @tags tags
         * @name TagsGet
         * @request GET:/tags.get
         * @secure
         */
        this.tagsGet = (query, params = {}) => this.request(Object.assign({ path: `/tags.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a tag's information.
         *
         * @tags tags
         * @name TagsGetPost
         * @request POST:/tags.get
         * @secure
         */
        this.tagsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/tags.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the available tags.
         *
         * @tags tags
         * @name TagsList
         * @request GET:/tags.list
         * @secure
         */
        this.tagsList = (query, params = {}) => this.request(Object.assign({ path: `/tags.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the available tags.
         *
         * @tags tags
         * @name TagsListPost
         * @request POST:/tags.list
         * @secure
         */
        this.tagsListPost = (data, params = {}) => this.request(Object.assign({ path: `/tags.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a tag's information.
         *
         * @tags tags
         * @name TagsUpdate
         * @request POST:/tags.update
         * @secure
         */
        this.tagsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/tags.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new entry on an object's timeline.
         *
         * @tags timeline-entries
         * @name TimelineEntriesCreate
         * @request POST:/timeline-entries.create
         * @secure
         */
        this.timelineEntriesCreate = (data, params = {}) => this.request(Object.assign({ path: `/timeline-entries.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes an entry from an object's timeline.
         *
         * @tags timeline-entries
         * @name TimelineEntriesDelete
         * @request POST:/timeline-entries.delete
         * @secure
         */
        this.timelineEntriesDelete = (data, params = {}) => this.request(Object.assign({ path: `/timeline-entries.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets an entry on an object's timeline.
         *
         * @tags timeline-entries
         * @name TimelineEntriesGet
         * @request GET:/timeline-entries.get
         * @secure
         */
        this.timelineEntriesGet = (query, params = {}) => this.request(Object.assign({ path: `/timeline-entries.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an entry on an object's timeline.
         *
         * @tags timeline-entries
         * @name TimelineEntriesGetPost
         * @request POST:/timeline-entries.get
         * @secure
         */
        this.timelineEntriesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/timeline-entries.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the timeline entries for an object.
         *
         * @tags timeline-entries
         * @name TimelineEntriesList
         * @request GET:/timeline-entries.list
         * @secure
         */
        this.timelineEntriesList = (query, params = {}) => this.request(Object.assign({ path: `/timeline-entries.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the timeline entries for an object.
         *
         * @tags timeline-entries
         * @name TimelineEntriesListPost
         * @request POST:/timeline-entries.list
         * @secure
         */
        this.timelineEntriesListPost = (data, params = {}) => this.request(Object.assign({ path: `/timeline-entries.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an entry on an object's timeline.
         *
         * @tags timeline-entries
         * @name TimelineEntriesUpdate
         * @request POST:/timeline-entries.update
         * @secure
         */
        this.timelineEntriesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/timeline-entries.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Allows publishing of events (example from plug widget).
         *
         * @tags event-source
         * @name TrackEventsPublish
         * @request POST:/track-events.publish
         * @secure
         */
        this.trackEventsPublish = (data, params = {}) => this.request(Object.assign({ path: `/track-events.publish`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Counts the number of Unit of Measurements based on the given filters.
         *
         * @tags product-usage
         * @name UomsCount
         * @request GET:/uoms.count
         * @secure
         */
        this.uomsCount = (query, params = {}) => this.request(Object.assign({ path: `/uoms.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Counts the number of Unit of Measurements based on the given filters.
         *
         * @tags product-usage
         * @name UomsCountPost
         * @request POST:/uoms.count
         * @secure
         */
        this.uomsCountPost = (data, params = {}) => this.request(Object.assign({ path: `/uoms.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a Unit of Measurement on a part.
         *
         * @tags product-usage
         * @name UomsCreate
         * @request POST:/uoms.create
         * @secure
         */
        this.uomsCreate = (data, params = {}) => this.request(Object.assign({ path: `/uoms.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a Unit of Measurement.
         *
         * @tags product-usage
         * @name UomsDelete
         * @request POST:/uoms.delete
         * @secure
         */
        this.uomsDelete = (data, params = {}) => this.request(Object.assign({ path: `/uoms.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Gets a Unit of Measurement.
         *
         * @tags product-usage
         * @name UomsGet
         * @request GET:/uoms.get
         * @secure
         */
        this.uomsGet = (query, params = {}) => this.request(Object.assign({ path: `/uoms.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a Unit of Measurement.
         *
         * @tags product-usage
         * @name UomsGetPost
         * @request POST:/uoms.get
         * @secure
         */
        this.uomsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/uoms.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the Unit of Measurements based on the given filters.
         *
         * @tags product-usage
         * @name UomsList
         * @request GET:/uoms.list
         * @secure
         */
        this.uomsList = (query, params = {}) => this.request(Object.assign({ path: `/uoms.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the Unit of Measurements based on the given filters.
         *
         * @tags product-usage
         * @name UomsListPost
         * @request POST:/uoms.list
         * @secure
         */
        this.uomsListPost = (data, params = {}) => this.request(Object.assign({ path: `/uoms.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a Unit of Measurement.
         *
         * @tags product-usage
         * @name UomsUpdate
         * @request POST:/uoms.update
         * @secure
         */
        this.uomsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/uoms.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new webhook target.
         *
         * @tags webhooks
         * @name WebhooksCreate
         * @request POST:/webhooks.create
         * @secure
         */
        this.webhooksCreate = (data, params = {}) => this.request(Object.assign({ path: `/webhooks.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the requested webhook.
         *
         * @tags webhooks
         * @name WebhooksDelete
         * @request POST:/webhooks.delete
         * @secure
         */
        this.webhooksDelete = (data, params = {}) => this.request(Object.assign({ path: `/webhooks.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Fetches an object via webhook.
         *
         * @tags webhooks
         * @name WebhooksFetch
         * @request POST:/webhooks.fetch
         * @secure
         */
        this.webhooksFetch = (data, params = {}) => this.request(Object.assign({ path: `/webhooks.fetch`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the requested webhook's information.
         *
         * @tags webhooks
         * @name WebhooksGet
         * @request GET:/webhooks.get
         * @secure
         */
        this.webhooksGet = (query, params = {}) => this.request(Object.assign({ path: `/webhooks.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the requested webhook's information.
         *
         * @tags webhooks
         * @name WebhooksGetPost
         * @request POST:/webhooks.get
         * @secure
         */
        this.webhooksGetPost = (data, params = {}) => this.request(Object.assign({ path: `/webhooks.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the webhooks.
         *
         * @tags webhooks
         * @name WebhooksList
         * @request GET:/webhooks.list
         * @secure
         */
        this.webhooksList = (params = {}) => this.request(Object.assign({ path: `/webhooks.list`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Lists the webhooks.
         *
         * @tags webhooks
         * @name WebhooksListPost
         * @request POST:/webhooks.list
         * @secure
         */
        this.webhooksListPost = (data, params = {}) => this.request(Object.assign({ path: `/webhooks.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the requested webhook.
         *
         * @tags webhooks
         * @name WebhooksUpdate
         * @request POST:/webhooks.update
         * @secure
         */
        this.webhooksUpdate = (data, params = {}) => this.request(Object.assign({ path: `/webhooks.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates new work ([issue](https://devrev.ai/docs/product/build), [ticket](https://devrev.ai/docs/product/support)) item. [task](https://docs.devrev.ai/product/tasks) and opportunity work types are supported in the beta version.
         *
         * @tags works
         * @name WorksCreate
         * @request POST:/works.create
         * @secure
         */
        this.worksCreate = (data, params = {}) => this.request(Object.assign({ path: `/works.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a work item.
         *
         * @tags works
         * @name WorksDelete
         * @request POST:/works.delete
         * @secure
         */
        this.worksDelete = (data, params = {}) => this.request(Object.assign({ path: `/works.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Exports a collection of work items.
         *
         * @tags works
         * @name WorksExport
         * @request GET:/works.export
         * @secure
         */
        this.worksExport = (query, params = {}) => this.request(Object.assign({ path: `/works.export`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Exports a collection of work items.
         *
         * @tags works
         * @name WorksExportPost
         * @request POST:/works.export
         * @secure
         */
        this.worksExportPost = (data, params = {}) => this.request(Object.assign({ path: `/works.export`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a work item's information.
         *
         * @tags works
         * @name WorksGet
         * @request GET:/works.get
         * @secure
         */
        this.worksGet = (query, params = {}) => this.request(Object.assign({ path: `/works.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a work item's information.
         *
         * @tags works
         * @name WorksGetPost
         * @request POST:/works.get
         * @secure
         */
        this.worksGetPost = (data, params = {}) => this.request(Object.assign({ path: `/works.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists a collection of work items.
         *
         * @tags works
         * @name WorksList
         * @request GET:/works.list
         * @secure
         */
        this.worksList = (query, params = {}) => this.request(Object.assign({ path: `/works.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists a collection of work items.
         *
         * @tags works
         * @name WorksListPost
         * @request POST:/works.list
         * @secure
         */
        this.worksListPost = (data, params = {}) => this.request(Object.assign({ path: `/works.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a work item's information.
         *
         * @tags works
         * @name WorksUpdate
         * @request POST:/works.update
         * @secure
         */
        this.worksUpdate = (data, params = {}) => this.request(Object.assign({ path: `/works.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
    }
}
exports.Api = Api;
